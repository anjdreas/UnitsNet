//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Globalization;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.InternalHelpers;
using UnitsNet.Units;

#nullable enable

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <inheritdoc />
    /// <summary>
    ///     The range of the aircraft per unit of fuel.
    /// </summary>
    public partial struct SpecificRange : IQuantity<SpecificRangeUnit>, IEquatable<SpecificRange>, IComparable, IComparable<SpecificRange>, IConvertible, IFormattable
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly SpecificRangeUnit? _unit;

        static SpecificRange()
        {
            BaseDimensions = new BaseDimensions(0, -1, 2, 0, 0, 0, 0);

            Info = new QuantityInfo<SpecificRangeUnit>("SpecificRange",
                new UnitInfo<SpecificRangeUnit>[] {
                    new UnitInfo<SpecificRangeUnit>(SpecificRangeUnit.CentimeterPerKilogramForce, BaseUnits.Undefined),
                    new UnitInfo<SpecificRangeUnit>(SpecificRangeUnit.CentimeterPerNewton, BaseUnits.Undefined),
                    new UnitInfo<SpecificRangeUnit>(SpecificRangeUnit.DecameterPerKilogramForce, BaseUnits.Undefined),
                    new UnitInfo<SpecificRangeUnit>(SpecificRangeUnit.DecameterPerNewton, BaseUnits.Undefined),
                    new UnitInfo<SpecificRangeUnit>(SpecificRangeUnit.DecimeterPerKilogramForce, BaseUnits.Undefined),
                    new UnitInfo<SpecificRangeUnit>(SpecificRangeUnit.DecimeterPerNewton, BaseUnits.Undefined),
                    new UnitInfo<SpecificRangeUnit>(SpecificRangeUnit.KilometerPerKilogramForce, BaseUnits.Undefined),
                    new UnitInfo<SpecificRangeUnit>(SpecificRangeUnit.KilometerPerNewton, BaseUnits.Undefined),
                    new UnitInfo<SpecificRangeUnit>(SpecificRangeUnit.MegameterPerKilogramForce, BaseUnits.Undefined),
                    new UnitInfo<SpecificRangeUnit>(SpecificRangeUnit.MegameterPerNewton, BaseUnits.Undefined),
                    new UnitInfo<SpecificRangeUnit>(SpecificRangeUnit.MeterPerKilogramForce, BaseUnits.Undefined),
                    new UnitInfo<SpecificRangeUnit>(SpecificRangeUnit.MeterPerNewton, BaseUnits.Undefined),
                    new UnitInfo<SpecificRangeUnit>(SpecificRangeUnit.MicrometerPerKilogramForce, BaseUnits.Undefined),
                    new UnitInfo<SpecificRangeUnit>(SpecificRangeUnit.MicrometerPerNewton, BaseUnits.Undefined),
                    new UnitInfo<SpecificRangeUnit>(SpecificRangeUnit.MillimeterPerKilogramForce, BaseUnits.Undefined),
                    new UnitInfo<SpecificRangeUnit>(SpecificRangeUnit.MillimeterPerNewton, BaseUnits.Undefined),
                    new UnitInfo<SpecificRangeUnit>(SpecificRangeUnit.NanometerPerKilogramForce, BaseUnits.Undefined),
                    new UnitInfo<SpecificRangeUnit>(SpecificRangeUnit.NanometerPerNewton, BaseUnits.Undefined),
                    new UnitInfo<SpecificRangeUnit>(SpecificRangeUnit.NauticalMilePerPoundForce, BaseUnits.Undefined),
                },
                BaseUnit, Zero, BaseDimensions, QuantityType.SpecificRange);
        }

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public SpecificRange(double value, SpecificRangeUnit unit)
        {
            if(unit == SpecificRangeUnit.Undefined)
              throw new ArgumentException("The quantity can not be created with an undefined unit.", nameof(unit));

            _value = Guard.EnsureValidNumber(value, nameof(value));
            _unit = unit;
        }

        /// <summary>
        /// Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="UnitSystem"/>.
        /// If multiple compatible units were found, the first match is used.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unitSystem">The unit system to create the quantity with.</param>
        /// <exception cref="ArgumentNullException">The given <see cref="UnitSystem"/> is null.</exception>
        /// <exception cref="ArgumentException">No unit was found for the given <see cref="UnitSystem"/>.</exception>
        public SpecificRange(double value, UnitSystem unitSystem)
        {
            if(unitSystem is null) throw new ArgumentNullException(nameof(unitSystem));

            var unitInfos = Info.GetUnitInfosFor(unitSystem.BaseUnits);
            var firstUnitInfo = unitInfos.FirstOrDefault();

            _value = Guard.EnsureValidNumber(value, nameof(value));
            _unit = firstUnitInfo?.Value ?? throw new ArgumentException("No units were found for the given UnitSystem.", nameof(unitSystem));
        }

        #region Static Properties

        /// <inheritdoc cref="IQuantity.QuantityInfo"/>
        public static QuantityInfo<SpecificRangeUnit> Info { get; }

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public static BaseDimensions BaseDimensions { get; }

        /// <summary>
        ///     The base unit of SpecificRange, which is MeterPerKilogramForce. All conversions go via this value.
        /// </summary>
        public static SpecificRangeUnit BaseUnit { get; } = SpecificRangeUnit.MeterPerKilogramForce;

        /// <summary>
        /// Represents the largest possible value of SpecificRange
        /// </summary>
        [Obsolete("MaxValue and MinValue will be removed. Choose your own value or use nullability for unbounded lower/upper range checks. See discussion in https://github.com/angularsen/UnitsNet/issues/848.")]
        public static SpecificRange MaxValue { get; } = new SpecificRange(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of SpecificRange
        /// </summary>
        [Obsolete("MaxValue and MinValue will be removed. Choose your own value or use nullability for unbounded lower/upper range checks. See discussion in https://github.com/angularsen/UnitsNet/issues/848.")]
        public static SpecificRange MinValue { get; } = new SpecificRange(double.MinValue, BaseUnit);

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        [Obsolete("QuantityType will be removed in the future. Use Info property instead.")]
        public static QuantityType QuantityType { get; } = QuantityType.SpecificRange;

        /// <summary>
        ///     All units of measurement for the SpecificRange quantity.
        /// </summary>
        public static SpecificRangeUnit[] Units { get; } = Enum.GetValues(typeof(SpecificRangeUnit)).Cast<SpecificRangeUnit>().Except(new SpecificRangeUnit[]{ SpecificRangeUnit.Undefined }).ToArray();

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit MeterPerKilogramForce.
        /// </summary>
        public static SpecificRange Zero { get; } = new SpecificRange(0, BaseUnit);

        #endregion

        #region Properties

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => _value;

        Enum IQuantity.Unit => Unit;

        /// <inheritdoc />
        public SpecificRangeUnit Unit => _unit.GetValueOrDefault(BaseUnit);

        /// <inheritdoc />
        public QuantityInfo<SpecificRangeUnit> QuantityInfo => Info;

        /// <inheritdoc cref="IQuantity.QuantityInfo"/>
        QuantityInfo IQuantity.QuantityInfo => Info;

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public QuantityType Type => SpecificRange.QuantityType;

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public BaseDimensions Dimensions => SpecificRange.BaseDimensions;

        #endregion

        #region Conversion Properties

        /// <summary>
        ///     Get SpecificRange in CentimetersPerKilogramForce.
        /// </summary>
        public double CentimetersPerKilogramForce => As(SpecificRangeUnit.CentimeterPerKilogramForce);

        /// <summary>
        ///     Get SpecificRange in CentimetersPerNewton.
        /// </summary>
        public double CentimetersPerNewton => As(SpecificRangeUnit.CentimeterPerNewton);

        /// <summary>
        ///     Get SpecificRange in DecametersPerKilogramForce.
        /// </summary>
        public double DecametersPerKilogramForce => As(SpecificRangeUnit.DecameterPerKilogramForce);

        /// <summary>
        ///     Get SpecificRange in DecametersPerNewton.
        /// </summary>
        public double DecametersPerNewton => As(SpecificRangeUnit.DecameterPerNewton);

        /// <summary>
        ///     Get SpecificRange in DecimetersPerKilogramForce.
        /// </summary>
        public double DecimetersPerKilogramForce => As(SpecificRangeUnit.DecimeterPerKilogramForce);

        /// <summary>
        ///     Get SpecificRange in DecimetersPerNewton.
        /// </summary>
        public double DecimetersPerNewton => As(SpecificRangeUnit.DecimeterPerNewton);

        /// <summary>
        ///     Get SpecificRange in KilometersPerKilogramForce.
        /// </summary>
        public double KilometersPerKilogramForce => As(SpecificRangeUnit.KilometerPerKilogramForce);

        /// <summary>
        ///     Get SpecificRange in KilometersPerNewton.
        /// </summary>
        public double KilometersPerNewton => As(SpecificRangeUnit.KilometerPerNewton);

        /// <summary>
        ///     Get SpecificRange in MegametersPerKilogramForce.
        /// </summary>
        public double MegametersPerKilogramForce => As(SpecificRangeUnit.MegameterPerKilogramForce);

        /// <summary>
        ///     Get SpecificRange in MegametersPerNewton.
        /// </summary>
        public double MegametersPerNewton => As(SpecificRangeUnit.MegameterPerNewton);

        /// <summary>
        ///     Get SpecificRange in MetersPerKilogramForce.
        /// </summary>
        public double MetersPerKilogramForce => As(SpecificRangeUnit.MeterPerKilogramForce);

        /// <summary>
        ///     Get SpecificRange in MetersPerNewton.
        /// </summary>
        public double MetersPerNewton => As(SpecificRangeUnit.MeterPerNewton);

        /// <summary>
        ///     Get SpecificRange in MicrometersPerKilogramForce.
        /// </summary>
        public double MicrometersPerKilogramForce => As(SpecificRangeUnit.MicrometerPerKilogramForce);

        /// <summary>
        ///     Get SpecificRange in MicrometersPerNewton.
        /// </summary>
        public double MicrometersPerNewton => As(SpecificRangeUnit.MicrometerPerNewton);

        /// <summary>
        ///     Get SpecificRange in MillimetersPerKilogramForce.
        /// </summary>
        public double MillimetersPerKilogramForce => As(SpecificRangeUnit.MillimeterPerKilogramForce);

        /// <summary>
        ///     Get SpecificRange in MillimetersPerNewton.
        /// </summary>
        public double MillimetersPerNewton => As(SpecificRangeUnit.MillimeterPerNewton);

        /// <summary>
        ///     Get SpecificRange in NanometersPerKilogramForce.
        /// </summary>
        public double NanometersPerKilogramForce => As(SpecificRangeUnit.NanometerPerKilogramForce);

        /// <summary>
        ///     Get SpecificRange in NanometersPerNewton.
        /// </summary>
        public double NanometersPerNewton => As(SpecificRangeUnit.NanometerPerNewton);

        /// <summary>
        ///     Get SpecificRange in NauticalMilesPerPoundForce.
        /// </summary>
        public double NauticalMilesPerPoundForce => As(SpecificRangeUnit.NauticalMilePerPoundForce);

        #endregion

        #region Static Methods

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        public static string GetAbbreviation(SpecificRangeUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        /// <param name="provider">Format to use for localization. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static string GetAbbreviation(SpecificRangeUnit unit, IFormatProvider? provider)
        {
            return UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit, provider);
        }

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Get SpecificRange from CentimetersPerKilogramForce.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificRange FromCentimetersPerKilogramForce(QuantityValue centimetersperkilogramforce)
        {
            double value = (double) centimetersperkilogramforce;
            return new SpecificRange(value, SpecificRangeUnit.CentimeterPerKilogramForce);
        }
        /// <summary>
        ///     Get SpecificRange from CentimetersPerNewton.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificRange FromCentimetersPerNewton(QuantityValue centimeterspernewton)
        {
            double value = (double) centimeterspernewton;
            return new SpecificRange(value, SpecificRangeUnit.CentimeterPerNewton);
        }
        /// <summary>
        ///     Get SpecificRange from DecametersPerKilogramForce.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificRange FromDecametersPerKilogramForce(QuantityValue decametersperkilogramforce)
        {
            double value = (double) decametersperkilogramforce;
            return new SpecificRange(value, SpecificRangeUnit.DecameterPerKilogramForce);
        }
        /// <summary>
        ///     Get SpecificRange from DecametersPerNewton.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificRange FromDecametersPerNewton(QuantityValue decameterspernewton)
        {
            double value = (double) decameterspernewton;
            return new SpecificRange(value, SpecificRangeUnit.DecameterPerNewton);
        }
        /// <summary>
        ///     Get SpecificRange from DecimetersPerKilogramForce.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificRange FromDecimetersPerKilogramForce(QuantityValue decimetersperkilogramforce)
        {
            double value = (double) decimetersperkilogramforce;
            return new SpecificRange(value, SpecificRangeUnit.DecimeterPerKilogramForce);
        }
        /// <summary>
        ///     Get SpecificRange from DecimetersPerNewton.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificRange FromDecimetersPerNewton(QuantityValue decimeterspernewton)
        {
            double value = (double) decimeterspernewton;
            return new SpecificRange(value, SpecificRangeUnit.DecimeterPerNewton);
        }
        /// <summary>
        ///     Get SpecificRange from KilometersPerKilogramForce.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificRange FromKilometersPerKilogramForce(QuantityValue kilometersperkilogramforce)
        {
            double value = (double) kilometersperkilogramforce;
            return new SpecificRange(value, SpecificRangeUnit.KilometerPerKilogramForce);
        }
        /// <summary>
        ///     Get SpecificRange from KilometersPerNewton.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificRange FromKilometersPerNewton(QuantityValue kilometerspernewton)
        {
            double value = (double) kilometerspernewton;
            return new SpecificRange(value, SpecificRangeUnit.KilometerPerNewton);
        }
        /// <summary>
        ///     Get SpecificRange from MegametersPerKilogramForce.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificRange FromMegametersPerKilogramForce(QuantityValue megametersperkilogramforce)
        {
            double value = (double) megametersperkilogramforce;
            return new SpecificRange(value, SpecificRangeUnit.MegameterPerKilogramForce);
        }
        /// <summary>
        ///     Get SpecificRange from MegametersPerNewton.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificRange FromMegametersPerNewton(QuantityValue megameterspernewton)
        {
            double value = (double) megameterspernewton;
            return new SpecificRange(value, SpecificRangeUnit.MegameterPerNewton);
        }
        /// <summary>
        ///     Get SpecificRange from MetersPerKilogramForce.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificRange FromMetersPerKilogramForce(QuantityValue metersperkilogramforce)
        {
            double value = (double) metersperkilogramforce;
            return new SpecificRange(value, SpecificRangeUnit.MeterPerKilogramForce);
        }
        /// <summary>
        ///     Get SpecificRange from MetersPerNewton.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificRange FromMetersPerNewton(QuantityValue meterspernewton)
        {
            double value = (double) meterspernewton;
            return new SpecificRange(value, SpecificRangeUnit.MeterPerNewton);
        }
        /// <summary>
        ///     Get SpecificRange from MicrometersPerKilogramForce.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificRange FromMicrometersPerKilogramForce(QuantityValue micrometersperkilogramforce)
        {
            double value = (double) micrometersperkilogramforce;
            return new SpecificRange(value, SpecificRangeUnit.MicrometerPerKilogramForce);
        }
        /// <summary>
        ///     Get SpecificRange from MicrometersPerNewton.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificRange FromMicrometersPerNewton(QuantityValue micrometerspernewton)
        {
            double value = (double) micrometerspernewton;
            return new SpecificRange(value, SpecificRangeUnit.MicrometerPerNewton);
        }
        /// <summary>
        ///     Get SpecificRange from MillimetersPerKilogramForce.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificRange FromMillimetersPerKilogramForce(QuantityValue millimetersperkilogramforce)
        {
            double value = (double) millimetersperkilogramforce;
            return new SpecificRange(value, SpecificRangeUnit.MillimeterPerKilogramForce);
        }
        /// <summary>
        ///     Get SpecificRange from MillimetersPerNewton.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificRange FromMillimetersPerNewton(QuantityValue millimeterspernewton)
        {
            double value = (double) millimeterspernewton;
            return new SpecificRange(value, SpecificRangeUnit.MillimeterPerNewton);
        }
        /// <summary>
        ///     Get SpecificRange from NanometersPerKilogramForce.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificRange FromNanometersPerKilogramForce(QuantityValue nanometersperkilogramforce)
        {
            double value = (double) nanometersperkilogramforce;
            return new SpecificRange(value, SpecificRangeUnit.NanometerPerKilogramForce);
        }
        /// <summary>
        ///     Get SpecificRange from NanometersPerNewton.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificRange FromNanometersPerNewton(QuantityValue nanometerspernewton)
        {
            double value = (double) nanometerspernewton;
            return new SpecificRange(value, SpecificRangeUnit.NanometerPerNewton);
        }
        /// <summary>
        ///     Get SpecificRange from NauticalMilesPerPoundForce.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificRange FromNauticalMilesPerPoundForce(QuantityValue nauticalmilesperpoundforce)
        {
            double value = (double) nauticalmilesperpoundforce;
            return new SpecificRange(value, SpecificRangeUnit.NauticalMilePerPoundForce);
        }

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="SpecificRangeUnit" /> to <see cref="SpecificRange" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>SpecificRange unit value.</returns>
        public static SpecificRange From(QuantityValue value, SpecificRangeUnit fromUnit)
        {
            return new SpecificRange((double)value, fromUnit);
        }

        #endregion

        #region Static Parse Methods

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static SpecificRange Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static SpecificRange Parse(string str, IFormatProvider? provider)
        {
            return QuantityParser.Default.Parse<SpecificRange, SpecificRangeUnit>(
                str,
                provider,
                From);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse(string? str, out SpecificRange result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static bool TryParse(string? str, IFormatProvider? provider, out SpecificRange result)
        {
            return QuantityParser.Default.TryParse<SpecificRange, SpecificRangeUnit>(
                str,
                provider,
                From,
                out result);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static SpecificRangeUnit ParseUnit(string str)
        {
            return ParseUnit(str, null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static SpecificRangeUnit ParseUnit(string str, IFormatProvider? provider)
        {
            return UnitParser.Default.Parse<SpecificRangeUnit>(str, provider);
        }

        /// <inheritdoc cref="TryParseUnit(string,IFormatProvider,out UnitsNet.Units.SpecificRangeUnit)"/>
        public static bool TryParseUnit(string str, out SpecificRangeUnit unit)
        {
            return TryParseUnit(str, null, out unit);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="unit">The parsed unit if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.TryParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static bool TryParseUnit(string str, IFormatProvider? provider, out SpecificRangeUnit unit)
        {
            return UnitParser.Default.TryParse<SpecificRangeUnit>(str, provider, out unit);
        }

        #endregion

        #region Arithmetic Operators

        /// <summary>Negate the value.</summary>
        public static SpecificRange operator -(SpecificRange right)
        {
            return new SpecificRange(-right.Value, right.Unit);
        }

        /// <summary>Get <see cref="SpecificRange"/> from adding two <see cref="SpecificRange"/>.</summary>
        public static SpecificRange operator +(SpecificRange left, SpecificRange right)
        {
            return new SpecificRange(left.Value + right.GetValueAs(left.Unit), left.Unit);
        }

        /// <summary>Get <see cref="SpecificRange"/> from subtracting two <see cref="SpecificRange"/>.</summary>
        public static SpecificRange operator -(SpecificRange left, SpecificRange right)
        {
            return new SpecificRange(left.Value - right.GetValueAs(left.Unit), left.Unit);
        }

        /// <summary>Get <see cref="SpecificRange"/> from multiplying value and <see cref="SpecificRange"/>.</summary>
        public static SpecificRange operator *(double left, SpecificRange right)
        {
            return new SpecificRange(left * right.Value, right.Unit);
        }

        /// <summary>Get <see cref="SpecificRange"/> from multiplying value and <see cref="SpecificRange"/>.</summary>
        public static SpecificRange operator *(SpecificRange left, double right)
        {
            return new SpecificRange(left.Value * right, left.Unit);
        }

        /// <summary>Get <see cref="SpecificRange"/> from dividing <see cref="SpecificRange"/> by value.</summary>
        public static SpecificRange operator /(SpecificRange left, double right)
        {
            return new SpecificRange(left.Value / right, left.Unit);
        }

        /// <summary>Get ratio value from dividing <see cref="SpecificRange"/> by <see cref="SpecificRange"/>.</summary>
        public static double operator /(SpecificRange left, SpecificRange right)
        {
            return left.MetersPerKilogramForce / right.MetersPerKilogramForce;
        }

        #endregion

        #region Equality / IComparable

        /// <summary>Returns true if less or equal to.</summary>
        public static bool operator <=(SpecificRange left, SpecificRange right)
        {
            return left.Value <= right.GetValueAs(left.Unit);
        }

        /// <summary>Returns true if greater than or equal to.</summary>
        public static bool operator >=(SpecificRange left, SpecificRange right)
        {
            return left.Value >= right.GetValueAs(left.Unit);
        }

        /// <summary>Returns true if less than.</summary>
        public static bool operator <(SpecificRange left, SpecificRange right)
        {
            return left.Value < right.GetValueAs(left.Unit);
        }

        /// <summary>Returns true if greater than.</summary>
        public static bool operator >(SpecificRange left, SpecificRange right)
        {
            return left.Value > right.GetValueAs(left.Unit);
        }

        /// <summary>Returns true if exactly equal.</summary>
        /// <remarks>Consider using <see cref="Equals(SpecificRange, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public static bool operator ==(SpecificRange left, SpecificRange right)
        {
            return left.Equals(right);
        }

        /// <summary>Returns true if not exactly equal.</summary>
        /// <remarks>Consider using <see cref="Equals(SpecificRange, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public static bool operator !=(SpecificRange left, SpecificRange right)
        {
            return !(left == right);
        }

        /// <inheritdoc />
        public int CompareTo(object obj)
        {
            if(obj is null) throw new ArgumentNullException(nameof(obj));
            if(!(obj is SpecificRange objSpecificRange)) throw new ArgumentException("Expected type SpecificRange.", nameof(obj));

            return CompareTo(objSpecificRange);
        }

        /// <inheritdoc />
        public int CompareTo(SpecificRange other)
        {
            return _value.CompareTo(other.GetValueAs(this.Unit));
        }

        /// <inheritdoc />
        /// <remarks>Consider using <see cref="Equals(SpecificRange, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public override bool Equals(object obj)
        {
            if(obj is null || !(obj is SpecificRange objSpecificRange))
                return false;

            return Equals(objSpecificRange);
        }

        /// <inheritdoc />
        /// <remarks>Consider using <see cref="Equals(SpecificRange, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public bool Equals(SpecificRange other)
        {
            return _value.Equals(other.GetValueAs(this.Unit));
        }

        /// <summary>
        ///     <para>
        ///     Compare equality to another SpecificRange within the given absolute or relative tolerance.
        ///     </para>
        ///     <para>
        ///     Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
        ///     this quantity's value to be considered equal.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Relative);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Absolute);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Note that it is advised against specifying zero difference, due to the nature
        ///     of floating point operations and using System.Double internally.
        ///     </para>
        /// </summary>
        /// <param name="other">The other quantity to compare to.</param>
        /// <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
        /// <param name="comparisonType">The comparison type: either relative or absolute.</param>
        /// <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        public bool Equals(SpecificRange other, double tolerance, ComparisonType comparisonType)
        {
            if(tolerance < 0)
                throw new ArgumentOutOfRangeException("tolerance", "Tolerance must be greater than or equal to 0.");

            double thisValue = (double)this.Value;
            double otherValueInThisUnits = other.As(this.Unit);

            return UnitsNet.Comparison.Equals(thisValue, otherValueInThisUnits, tolerance, comparisonType);
        }

        /// <summary>
        ///     Returns the hash code for this instance.
        /// </summary>
        /// <returns>A hash code for the current SpecificRange.</returns>
        public override int GetHashCode()
        {
            return new { Info.Name, Value, Unit }.GetHashCode();
        }

        #endregion

        #region Conversion Methods

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(SpecificRangeUnit unit)
        {
            if(Unit == unit)
                return Convert.ToDouble(Value);

            var converted = GetValueAs(unit);
            return Convert.ToDouble(converted);
        }

        /// <inheritdoc cref="IQuantity.As(UnitSystem)"/>
        public double As(UnitSystem unitSystem)
        {
            if(unitSystem is null)
                throw new ArgumentNullException(nameof(unitSystem));

            var unitInfos = Info.GetUnitInfosFor(unitSystem.BaseUnits);

            var firstUnitInfo = unitInfos.FirstOrDefault();
            if(firstUnitInfo == null)
                throw new ArgumentException("No units were found for the given UnitSystem.", nameof(unitSystem));

            return As(firstUnitInfo.Value);
        }

        /// <inheritdoc />
        double IQuantity.As(Enum unit)
        {
            if(!(unit is SpecificRangeUnit unitAsSpecificRangeUnit))
                throw new ArgumentException($"The given unit is of type {unit.GetType()}. Only {typeof(SpecificRangeUnit)} is supported.", nameof(unit));

            return As(unitAsSpecificRangeUnit);
        }

        /// <summary>
        ///     Converts this SpecificRange to another SpecificRange with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A SpecificRange with the specified unit.</returns>
        public SpecificRange ToUnit(SpecificRangeUnit unit)
        {
            var convertedValue = GetValueAs(unit);
            return new SpecificRange(convertedValue, unit);
        }

        /// <inheritdoc />
        IQuantity IQuantity.ToUnit(Enum unit)
        {
            if(!(unit is SpecificRangeUnit unitAsSpecificRangeUnit))
                throw new ArgumentException($"The given unit is of type {unit.GetType()}. Only {typeof(SpecificRangeUnit)} is supported.", nameof(unit));

            return ToUnit(unitAsSpecificRangeUnit);
        }

        /// <inheritdoc cref="IQuantity.ToUnit(UnitSystem)"/>
        public SpecificRange ToUnit(UnitSystem unitSystem)
        {
            if(unitSystem is null)
                throw new ArgumentNullException(nameof(unitSystem));

            var unitInfos = Info.GetUnitInfosFor(unitSystem.BaseUnits);

            var firstUnitInfo = unitInfos.FirstOrDefault();
            if(firstUnitInfo == null)
                throw new ArgumentException("No units were found for the given UnitSystem.", nameof(unitSystem));

            return ToUnit(firstUnitInfo.Value);
        }

        /// <inheritdoc />
        IQuantity IQuantity.ToUnit(UnitSystem unitSystem) => ToUnit(unitSystem);

        /// <inheritdoc />
        IQuantity<SpecificRangeUnit> IQuantity<SpecificRangeUnit>.ToUnit(SpecificRangeUnit unit) => ToUnit(unit);

        /// <inheritdoc />
        IQuantity<SpecificRangeUnit> IQuantity<SpecificRangeUnit>.ToUnit(UnitSystem unitSystem) => ToUnit(unitSystem);

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private double GetValueInBaseUnit()
        {
            switch(Unit)
            {
                case SpecificRangeUnit.CentimeterPerKilogramForce: return (_value) * 1e-2d;
                case SpecificRangeUnit.CentimeterPerNewton: return (_value/0.101972) * 1e-2d;
                case SpecificRangeUnit.DecameterPerKilogramForce: return (_value) * 1e1d;
                case SpecificRangeUnit.DecameterPerNewton: return (_value/0.101972) * 1e1d;
                case SpecificRangeUnit.DecimeterPerKilogramForce: return (_value) * 1e-1d;
                case SpecificRangeUnit.DecimeterPerNewton: return (_value/0.101972) * 1e-1d;
                case SpecificRangeUnit.KilometerPerKilogramForce: return (_value) * 1e3d;
                case SpecificRangeUnit.KilometerPerNewton: return (_value/0.101972) * 1e3d;
                case SpecificRangeUnit.MegameterPerKilogramForce: return (_value) * 1e6d;
                case SpecificRangeUnit.MegameterPerNewton: return (_value/0.101972) * 1e6d;
                case SpecificRangeUnit.MeterPerKilogramForce: return _value;
                case SpecificRangeUnit.MeterPerNewton: return _value/0.101972;
                case SpecificRangeUnit.MicrometerPerKilogramForce: return (_value) * 1e-6d;
                case SpecificRangeUnit.MicrometerPerNewton: return (_value/0.101972) * 1e-6d;
                case SpecificRangeUnit.MillimeterPerKilogramForce: return (_value) * 1e-3d;
                case SpecificRangeUnit.MillimeterPerNewton: return (_value/0.101972) * 1e-3d;
                case SpecificRangeUnit.NanometerPerKilogramForce: return (_value) * 1e-9d;
                case SpecificRangeUnit.NanometerPerNewton: return (_value/0.101972) * 1e-9d;
                case SpecificRangeUnit.NauticalMilePerPoundForce: return _value/0.00024492;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to base units.");
            }
        }

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        internal SpecificRange ToBaseUnit()
        {
            var baseUnitValue = GetValueInBaseUnit();
            return new SpecificRange(baseUnitValue, BaseUnit);
        }

        private double GetValueAs(SpecificRangeUnit unit)
        {
            if(Unit == unit)
                return _value;

            var baseUnitValue = GetValueInBaseUnit();

            switch(unit)
            {
                case SpecificRangeUnit.CentimeterPerKilogramForce: return (baseUnitValue) / 1e-2d;
                case SpecificRangeUnit.CentimeterPerNewton: return (baseUnitValue*0.101972) / 1e-2d;
                case SpecificRangeUnit.DecameterPerKilogramForce: return (baseUnitValue) / 1e1d;
                case SpecificRangeUnit.DecameterPerNewton: return (baseUnitValue*0.101972) / 1e1d;
                case SpecificRangeUnit.DecimeterPerKilogramForce: return (baseUnitValue) / 1e-1d;
                case SpecificRangeUnit.DecimeterPerNewton: return (baseUnitValue*0.101972) / 1e-1d;
                case SpecificRangeUnit.KilometerPerKilogramForce: return (baseUnitValue) / 1e3d;
                case SpecificRangeUnit.KilometerPerNewton: return (baseUnitValue*0.101972) / 1e3d;
                case SpecificRangeUnit.MegameterPerKilogramForce: return (baseUnitValue) / 1e6d;
                case SpecificRangeUnit.MegameterPerNewton: return (baseUnitValue*0.101972) / 1e6d;
                case SpecificRangeUnit.MeterPerKilogramForce: return baseUnitValue;
                case SpecificRangeUnit.MeterPerNewton: return baseUnitValue*0.101972;
                case SpecificRangeUnit.MicrometerPerKilogramForce: return (baseUnitValue) / 1e-6d;
                case SpecificRangeUnit.MicrometerPerNewton: return (baseUnitValue*0.101972) / 1e-6d;
                case SpecificRangeUnit.MillimeterPerKilogramForce: return (baseUnitValue) / 1e-3d;
                case SpecificRangeUnit.MillimeterPerNewton: return (baseUnitValue*0.101972) / 1e-3d;
                case SpecificRangeUnit.NanometerPerKilogramForce: return (baseUnitValue) / 1e-9d;
                case SpecificRangeUnit.NanometerPerNewton: return (baseUnitValue*0.101972) / 1e-9d;
                case SpecificRangeUnit.NauticalMilePerPoundForce: return baseUnitValue*0.00024492;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to {unit}.");
            }
        }

        #endregion

        #region ToString Methods

        /// <summary>
        ///     Gets the default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString("g");
        }

        /// <summary>
        ///     Gets the default string representation of value and unit using the given format provider.
        /// </summary>
        /// <returns>String representation.</returns>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public string ToString(IFormatProvider? provider)
        {
            return ToString("g", provider);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
        /// <returns>String representation.</returns>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        [Obsolete(@"This method is deprecated and will be removed at a future release. Please use ToString(""s2"") or ToString(""s2"", provider) where 2 is an example of the number passed to significantDigitsAfterRadix.")]
        public string ToString(IFormatProvider? provider, int significantDigitsAfterRadix)
        {
            var value = Convert.ToDouble(Value);
            var format = UnitFormatter.GetFormat(value, significantDigitsAfterRadix);
            return ToString(provider, format);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
        /// <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
        /// <returns>String representation.</returns>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        [Obsolete("This method is deprecated and will be removed at a future release. Please use string.Format().")]
        public string ToString(IFormatProvider? provider, [NotNull] string format, [NotNull] params object[] args)
        {
            if (format == null) throw new ArgumentNullException(nameof(format));
            if (args == null) throw new ArgumentNullException(nameof(args));

            provider = provider ?? CultureInfo.CurrentUICulture;

            var value = Convert.ToDouble(Value);
            var formatArgs = UnitFormatter.GetFormatArgs(Unit, value, provider, args);
            return string.Format(provider, format, formatArgs);
        }

        /// <inheritdoc cref="QuantityFormatter.Format{TUnitType}(IQuantity{TUnitType}, string, IFormatProvider)"/>
        /// <summary>
        /// Gets the string representation of this instance in the specified format string using <see cref="CultureInfo.CurrentUICulture" />.
        /// </summary>
        /// <param name="format">The format string.</param>
        /// <returns>The string representation.</returns>
        public string ToString(string format)
        {
            return ToString(format, CultureInfo.CurrentUICulture);
        }

        /// <inheritdoc cref="QuantityFormatter.Format{TUnitType}(IQuantity{TUnitType}, string, IFormatProvider)"/>
        /// <summary>
        /// Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="CultureInfo.CurrentUICulture" /> if null.
        /// </summary>
        /// <param name="format">The format string.</param>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        /// <returns>The string representation.</returns>
        public string ToString(string format, IFormatProvider? provider)
        {
            return QuantityFormatter.Format<SpecificRangeUnit>(this, format, provider);
        }

        #endregion

        #region IConvertible Methods

        TypeCode IConvertible.GetTypeCode()
        {
            return TypeCode.Object;
        }

        bool IConvertible.ToBoolean(IFormatProvider provider)
        {
            throw new InvalidCastException($"Converting {typeof(SpecificRange)} to bool is not supported.");
        }

        byte IConvertible.ToByte(IFormatProvider provider)
        {
            return Convert.ToByte(_value);
        }

        char IConvertible.ToChar(IFormatProvider provider)
        {
            throw new InvalidCastException($"Converting {typeof(SpecificRange)} to char is not supported.");
        }

        DateTime IConvertible.ToDateTime(IFormatProvider provider)
        {
            throw new InvalidCastException($"Converting {typeof(SpecificRange)} to DateTime is not supported.");
        }

        decimal IConvertible.ToDecimal(IFormatProvider provider)
        {
            return Convert.ToDecimal(_value);
        }

        double IConvertible.ToDouble(IFormatProvider provider)
        {
            return Convert.ToDouble(_value);
        }

        short IConvertible.ToInt16(IFormatProvider provider)
        {
            return Convert.ToInt16(_value);
        }

        int IConvertible.ToInt32(IFormatProvider provider)
        {
            return Convert.ToInt32(_value);
        }

        long IConvertible.ToInt64(IFormatProvider provider)
        {
            return Convert.ToInt64(_value);
        }

        sbyte IConvertible.ToSByte(IFormatProvider provider)
        {
            return Convert.ToSByte(_value);
        }

        float IConvertible.ToSingle(IFormatProvider provider)
        {
            return Convert.ToSingle(_value);
        }

        string IConvertible.ToString(IFormatProvider provider)
        {
            return ToString("g", provider);
        }

        object IConvertible.ToType(Type conversionType, IFormatProvider provider)
        {
            if(conversionType == typeof(SpecificRange))
                return this;
            else if(conversionType == typeof(SpecificRangeUnit))
                return Unit;
            else if(conversionType == typeof(QuantityType))
                return SpecificRange.QuantityType;
            else if(conversionType == typeof(QuantityInfo))
                return SpecificRange.Info;
            else if(conversionType == typeof(BaseDimensions))
                return SpecificRange.BaseDimensions;
            else
                throw new InvalidCastException($"Converting {typeof(SpecificRange)} to {conversionType} is not supported.");
        }

        ushort IConvertible.ToUInt16(IFormatProvider provider)
        {
            return Convert.ToUInt16(_value);
        }

        uint IConvertible.ToUInt32(IFormatProvider provider)
        {
            return Convert.ToUInt32(_value);
        }

        ulong IConvertible.ToUInt64(IFormatProvider provider)
        {
            return Convert.ToUInt64(_value);
        }

        #endregion
    }
}
