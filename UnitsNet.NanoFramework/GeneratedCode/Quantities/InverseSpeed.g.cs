//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using UnitsNet.Units;

namespace UnitsNet
{
    /// <inheritdoc />
    /// <summary>
    ///     The inverse of speed, ie distance over time.
    /// </summary>
    public struct  InverseSpeed
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly InverseSpeedUnit _unit;

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => _value;

        /// <inheritdoc />
        public InverseSpeedUnit Unit => _unit;
        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public InverseSpeed(double value, InverseSpeedUnit unit)
        {
            _value = value;
            _unit = unit;
        }

        /// <summary>
        ///     The base unit of Duration, which is Second. All conversions go via this value.
        /// </summary>
        public static InverseSpeedUnit BaseUnit { get; } = InverseSpeedUnit.SecondPerMeter;

        /// <summary>
        /// Represents the largest possible value of Duration
        /// </summary>
        public static InverseSpeed MaxValue { get; } = new InverseSpeed(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of Duration
        /// </summary>
        public static InverseSpeed MinValue { get; } = new InverseSpeed(double.MinValue, BaseUnit);
        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit Second.
        /// </summary>
        public static InverseSpeed Zero { get; } = new InverseSpeed(0, BaseUnit);
        #region Conversion Properties

        /// <summary>
        ///     Get InverseSpeed in HoursPerFoot.
        /// </summary>
        public double HoursPerFoot => As(InverseSpeedUnit.HourPerFoot);

        /// <summary>
        ///     Get InverseSpeed in HoursPerInch.
        /// </summary>
        public double HoursPerInch => As(InverseSpeedUnit.HourPerInch);

        /// <summary>
        ///     Get InverseSpeed in HoursPerMeter.
        /// </summary>
        public double HoursPerMeter => As(InverseSpeedUnit.HourPerMeter);

        /// <summary>
        ///     Get InverseSpeed in HoursPerMile.
        /// </summary>
        public double HoursPerMile => As(InverseSpeedUnit.HourPerMile);

        /// <summary>
        ///     Get InverseSpeed in InverseKnots.
        /// </summary>
        public double InverseKnots => As(InverseSpeedUnit.InverseKnot);

        /// <summary>
        ///     Get InverseSpeed in MinutesPerFoot.
        /// </summary>
        public double MinutesPerFoot => As(InverseSpeedUnit.MinutePerFoot);

        /// <summary>
        ///     Get InverseSpeed in MinutesPerInch.
        /// </summary>
        public double MinutesPerInch => As(InverseSpeedUnit.MinutePerInch);

        /// <summary>
        ///     Get InverseSpeed in MinutesPerMeter.
        /// </summary>
        public double MinutesPerMeter => As(InverseSpeedUnit.MinutePerMeter);

        /// <summary>
        ///     Get InverseSpeed in SecondsPerFoot.
        /// </summary>
        public double SecondsPerFoot => As(InverseSpeedUnit.SecondPerFoot);

        /// <summary>
        ///     Get InverseSpeed in SecondsPerInch.
        /// </summary>
        public double SecondsPerInch => As(InverseSpeedUnit.SecondPerInch);

        /// <summary>
        ///     Get InverseSpeed in SecondsPerMeters.
        /// </summary>
        public double SecondsPerMeters => As(InverseSpeedUnit.SecondPerMeter);

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Get InverseSpeed from HoursPerFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static InverseSpeed FromHoursPerFoot(double hoursperfoot) => new InverseSpeed(hoursperfoot, InverseSpeedUnit.HourPerFoot);

        /// <summary>
        ///     Get InverseSpeed from HoursPerInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static InverseSpeed FromHoursPerInch(double hoursperinch) => new InverseSpeed(hoursperinch, InverseSpeedUnit.HourPerInch);

        /// <summary>
        ///     Get InverseSpeed from HoursPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static InverseSpeed FromHoursPerMeter(double hourspermeter) => new InverseSpeed(hourspermeter, InverseSpeedUnit.HourPerMeter);

        /// <summary>
        ///     Get InverseSpeed from HoursPerMile.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static InverseSpeed FromHoursPerMile(double hourspermile) => new InverseSpeed(hourspermile, InverseSpeedUnit.HourPerMile);

        /// <summary>
        ///     Get InverseSpeed from InverseKnots.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static InverseSpeed FromInverseKnots(double inverseknots) => new InverseSpeed(inverseknots, InverseSpeedUnit.InverseKnot);

        /// <summary>
        ///     Get InverseSpeed from MinutesPerFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static InverseSpeed FromMinutesPerFoot(double minutesperfoot) => new InverseSpeed(minutesperfoot, InverseSpeedUnit.MinutePerFoot);

        /// <summary>
        ///     Get InverseSpeed from MinutesPerInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static InverseSpeed FromMinutesPerInch(double minutesperinch) => new InverseSpeed(minutesperinch, InverseSpeedUnit.MinutePerInch);

        /// <summary>
        ///     Get InverseSpeed from MinutesPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static InverseSpeed FromMinutesPerMeter(double minutespermeter) => new InverseSpeed(minutespermeter, InverseSpeedUnit.MinutePerMeter);

        /// <summary>
        ///     Get InverseSpeed from SecondsPerFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static InverseSpeed FromSecondsPerFoot(double secondsperfoot) => new InverseSpeed(secondsperfoot, InverseSpeedUnit.SecondPerFoot);

        /// <summary>
        ///     Get InverseSpeed from SecondsPerInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static InverseSpeed FromSecondsPerInch(double secondsperinch) => new InverseSpeed(secondsperinch, InverseSpeedUnit.SecondPerInch);

        /// <summary>
        ///     Get InverseSpeed from SecondsPerMeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static InverseSpeed FromSecondsPerMeters(double secondspermeters) => new InverseSpeed(secondspermeters, InverseSpeedUnit.SecondPerMeter);


        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="InverseSpeedUnit" /> to <see cref="InverseSpeed" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>InverseSpeed unit value.</returns>
        public static InverseSpeed From(double value, InverseSpeedUnit fromUnit)
        {
            return new InverseSpeed(value, fromUnit);
        }

        #endregion

        #region Conversion Methods

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(InverseSpeedUnit unit) => GetValueAs(unit);        

        /// <summary>
        ///     Converts this Duration to another Duration with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A Duration with the specified unit.</returns>
        public InverseSpeed ToUnit(InverseSpeedUnit unit)
        {
                
            var convertedValue = GetValueAs(unit);
            return new InverseSpeed(convertedValue, unit);
        }


        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private double GetValueInBaseUnit()
        {
            switch(Unit)
            {
                case InverseSpeedUnit.HourPerFoot: return _value/11811;
                case InverseSpeedUnit.HourPerInch: return _value/1.41732e5;
                case InverseSpeedUnit.HourPerMeter: return _value/3600;
                case InverseSpeedUnit.HourPerMile: return _value/2.23694;
                case InverseSpeedUnit.InverseKnot: return _value/0.514444;
                case InverseSpeedUnit.MinutePerFoot: return _value/196.85;
                case InverseSpeedUnit.MinutePerInch: return _value/2362.2;
                case InverseSpeedUnit.MinutePerMeter: return _value/60;
                case InverseSpeedUnit.SecondPerFoot: return _value/0.3048;
                case InverseSpeedUnit.SecondPerInch: return _value/39.37;
                case InverseSpeedUnit.SecondPerMeter: return _value;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to base units.");
            }
        }

        private double GetValueAs(InverseSpeedUnit unit)
        {
            if(Unit == unit)
                return _value;

            var baseUnitValue = GetValueInBaseUnit();

            switch(unit)
            {
                case InverseSpeedUnit.HourPerFoot: return baseUnitValue*11811;
                case InverseSpeedUnit.HourPerInch: return baseUnitValue*1.41732e5;
                case InverseSpeedUnit.HourPerMeter: return baseUnitValue*3600;
                case InverseSpeedUnit.HourPerMile: return baseUnitValue*2.23694;
                case InverseSpeedUnit.InverseKnot: return baseUnitValue*0.514444;
                case InverseSpeedUnit.MinutePerFoot: return baseUnitValue*196.85;
                case InverseSpeedUnit.MinutePerInch: return baseUnitValue*2362.2;
                case InverseSpeedUnit.MinutePerMeter: return baseUnitValue*60;
                case InverseSpeedUnit.SecondPerFoot: return baseUnitValue*0.3048;
                case InverseSpeedUnit.SecondPerInch: return baseUnitValue*39.37;
                case InverseSpeedUnit.SecondPerMeter: return baseUnitValue;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to {unit}.");
            }
        }

        #endregion

    }
}

