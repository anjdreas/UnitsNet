//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToSpecificRange
{
    /// <summary>
    /// A number to SpecificRange Extensions
    /// </summary>
    public static class NumberToSpecificRangeExtensions
    {
        /// <inheritdoc cref="SpecificRange.FromCentimetersPerKilogramForce(UnitsNet.QuantityValue)" />
        public static SpecificRange CentimetersPerKilogramForce<T>(this T value) =>
            SpecificRange.FromCentimetersPerKilogramForce(Convert.ToDouble(value));

        /// <inheritdoc cref="SpecificRange.FromCentimetersPerNewton(UnitsNet.QuantityValue)" />
        public static SpecificRange CentimetersPerNewton<T>(this T value) =>
            SpecificRange.FromCentimetersPerNewton(Convert.ToDouble(value));

        /// <inheritdoc cref="SpecificRange.FromDecametersPerKilogramForce(UnitsNet.QuantityValue)" />
        public static SpecificRange DecametersPerKilogramForce<T>(this T value) =>
            SpecificRange.FromDecametersPerKilogramForce(Convert.ToDouble(value));

        /// <inheritdoc cref="SpecificRange.FromDecametersPerNewton(UnitsNet.QuantityValue)" />
        public static SpecificRange DecametersPerNewton<T>(this T value) =>
            SpecificRange.FromDecametersPerNewton(Convert.ToDouble(value));

        /// <inheritdoc cref="SpecificRange.FromDecimetersPerKilogramForce(UnitsNet.QuantityValue)" />
        public static SpecificRange DecimetersPerKilogramForce<T>(this T value) =>
            SpecificRange.FromDecimetersPerKilogramForce(Convert.ToDouble(value));

        /// <inheritdoc cref="SpecificRange.FromDecimetersPerNewton(UnitsNet.QuantityValue)" />
        public static SpecificRange DecimetersPerNewton<T>(this T value) =>
            SpecificRange.FromDecimetersPerNewton(Convert.ToDouble(value));

        /// <inheritdoc cref="SpecificRange.FromKilometersPerKilogramForce(UnitsNet.QuantityValue)" />
        public static SpecificRange KilometersPerKilogramForce<T>(this T value) =>
            SpecificRange.FromKilometersPerKilogramForce(Convert.ToDouble(value));

        /// <inheritdoc cref="SpecificRange.FromKilometersPerNewton(UnitsNet.QuantityValue)" />
        public static SpecificRange KilometersPerNewton<T>(this T value) =>
            SpecificRange.FromKilometersPerNewton(Convert.ToDouble(value));

        /// <inheritdoc cref="SpecificRange.FromMegametersPerKilogramForce(UnitsNet.QuantityValue)" />
        public static SpecificRange MegametersPerKilogramForce<T>(this T value) =>
            SpecificRange.FromMegametersPerKilogramForce(Convert.ToDouble(value));

        /// <inheritdoc cref="SpecificRange.FromMegametersPerNewton(UnitsNet.QuantityValue)" />
        public static SpecificRange MegametersPerNewton<T>(this T value) =>
            SpecificRange.FromMegametersPerNewton(Convert.ToDouble(value));

        /// <inheritdoc cref="SpecificRange.FromMetersPerKilogramForce(UnitsNet.QuantityValue)" />
        public static SpecificRange MetersPerKilogramForce<T>(this T value) =>
            SpecificRange.FromMetersPerKilogramForce(Convert.ToDouble(value));

        /// <inheritdoc cref="SpecificRange.FromMetersPerNewton(UnitsNet.QuantityValue)" />
        public static SpecificRange MetersPerNewton<T>(this T value) =>
            SpecificRange.FromMetersPerNewton(Convert.ToDouble(value));

        /// <inheritdoc cref="SpecificRange.FromMicrometersPerKilogramForce(UnitsNet.QuantityValue)" />
        public static SpecificRange MicrometersPerKilogramForce<T>(this T value) =>
            SpecificRange.FromMicrometersPerKilogramForce(Convert.ToDouble(value));

        /// <inheritdoc cref="SpecificRange.FromMicrometersPerNewton(UnitsNet.QuantityValue)" />
        public static SpecificRange MicrometersPerNewton<T>(this T value) =>
            SpecificRange.FromMicrometersPerNewton(Convert.ToDouble(value));

        /// <inheritdoc cref="SpecificRange.FromMillimetersPerKilogramForce(UnitsNet.QuantityValue)" />
        public static SpecificRange MillimetersPerKilogramForce<T>(this T value) =>
            SpecificRange.FromMillimetersPerKilogramForce(Convert.ToDouble(value));

        /// <inheritdoc cref="SpecificRange.FromMillimetersPerNewton(UnitsNet.QuantityValue)" />
        public static SpecificRange MillimetersPerNewton<T>(this T value) =>
            SpecificRange.FromMillimetersPerNewton(Convert.ToDouble(value));

        /// <inheritdoc cref="SpecificRange.FromNanometersPerKilogramForce(UnitsNet.QuantityValue)" />
        public static SpecificRange NanometersPerKilogramForce<T>(this T value) =>
            SpecificRange.FromNanometersPerKilogramForce(Convert.ToDouble(value));

        /// <inheritdoc cref="SpecificRange.FromNanometersPerNewton(UnitsNet.QuantityValue)" />
        public static SpecificRange NanometersPerNewton<T>(this T value) =>
            SpecificRange.FromNanometersPerNewton(Convert.ToDouble(value));

        /// <inheritdoc cref="SpecificRange.FromNauticalMilesPerPoundForce(UnitsNet.QuantityValue)" />
        public static SpecificRange NauticalMilesPerPoundForce<T>(this T value) =>
            SpecificRange.FromNauticalMilesPerPoundForce(Convert.ToDouble(value));

    }
}
