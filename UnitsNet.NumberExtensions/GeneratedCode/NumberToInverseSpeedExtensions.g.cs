//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToInverseSpeed
{
    /// <summary>
    /// A number to InverseSpeed Extensions
    /// </summary>
    public static class NumberToInverseSpeedExtensions
    {
        /// <inheritdoc cref="InverseSpeed.FromHoursPerFoot(UnitsNet.QuantityValue)" />
        public static InverseSpeed HoursPerFoot<T>(this T value) =>
            InverseSpeed.FromHoursPerFoot(Convert.ToDouble(value));

        /// <inheritdoc cref="InverseSpeed.FromHoursPerInch(UnitsNet.QuantityValue)" />
        public static InverseSpeed HoursPerInch<T>(this T value) =>
            InverseSpeed.FromHoursPerInch(Convert.ToDouble(value));

        /// <inheritdoc cref="InverseSpeed.FromHoursPerMeter(UnitsNet.QuantityValue)" />
        public static InverseSpeed HoursPerMeter<T>(this T value) =>
            InverseSpeed.FromHoursPerMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="InverseSpeed.FromHoursPerMile(UnitsNet.QuantityValue)" />
        public static InverseSpeed HoursPerMile<T>(this T value) =>
            InverseSpeed.FromHoursPerMile(Convert.ToDouble(value));

        /// <inheritdoc cref="InverseSpeed.FromInverseKnots(UnitsNet.QuantityValue)" />
        public static InverseSpeed InverseKnots<T>(this T value) =>
            InverseSpeed.FromInverseKnots(Convert.ToDouble(value));

        /// <inheritdoc cref="InverseSpeed.FromMinutesPerFoot(UnitsNet.QuantityValue)" />
        public static InverseSpeed MinutesPerFoot<T>(this T value) =>
            InverseSpeed.FromMinutesPerFoot(Convert.ToDouble(value));

        /// <inheritdoc cref="InverseSpeed.FromMinutesPerInch(UnitsNet.QuantityValue)" />
        public static InverseSpeed MinutesPerInch<T>(this T value) =>
            InverseSpeed.FromMinutesPerInch(Convert.ToDouble(value));

        /// <inheritdoc cref="InverseSpeed.FromMinutesPerMeter(UnitsNet.QuantityValue)" />
        public static InverseSpeed MinutesPerMeter<T>(this T value) =>
            InverseSpeed.FromMinutesPerMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="InverseSpeed.FromSecondsPerFoot(UnitsNet.QuantityValue)" />
        public static InverseSpeed SecondsPerFoot<T>(this T value) =>
            InverseSpeed.FromSecondsPerFoot(Convert.ToDouble(value));

        /// <inheritdoc cref="InverseSpeed.FromSecondsPerInch(UnitsNet.QuantityValue)" />
        public static InverseSpeed SecondsPerInch<T>(this T value) =>
            InverseSpeed.FromSecondsPerInch(Convert.ToDouble(value));

        /// <inheritdoc cref="InverseSpeed.FromSecondsPerMeters(UnitsNet.QuantityValue)" />
        public static InverseSpeed SecondsPerMeters<T>(this T value) =>
            InverseSpeed.FromSecondsPerMeters(Convert.ToDouble(value));

    }
}
