//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Linq;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of Irradiance.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class IrradianceTestsBase
    {
        protected abstract double KilowattsPerSquareCentimeterInOneWattPerSquareMeter { get; }
        protected abstract double KilowattsPerSquareMeterInOneWattPerSquareMeter { get; }
        protected abstract double MegawattsPerSquareCentimeterInOneWattPerSquareMeter { get; }
        protected abstract double MegawattsPerSquareMeterInOneWattPerSquareMeter { get; }
        protected abstract double MicrowattsPerSquareCentimeterInOneWattPerSquareMeter { get; }
        protected abstract double MicrowattsPerSquareMeterInOneWattPerSquareMeter { get; }
        protected abstract double MilliwattsPerSquareCentimeterInOneWattPerSquareMeter { get; }
        protected abstract double MilliwattsPerSquareMeterInOneWattPerSquareMeter { get; }
        protected abstract double NanowattsPerSquareCentimeterInOneWattPerSquareMeter { get; }
        protected abstract double NanowattsPerSquareMeterInOneWattPerSquareMeter { get; }
        protected abstract double PicowattsPerSquareCentimeterInOneWattPerSquareMeter { get; }
        protected abstract double PicowattsPerSquareMeterInOneWattPerSquareMeter { get; }
        protected abstract double WattsPerSquareCentimeterInOneWattPerSquareMeter { get; }
        protected abstract double WattsPerSquareMeterInOneWattPerSquareMeter { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double KilowattsPerSquareCentimeterTolerance { get { return 1e-5; } }
        protected virtual double KilowattsPerSquareMeterTolerance { get { return 1e-5; } }
        protected virtual double MegawattsPerSquareCentimeterTolerance { get { return 1e-5; } }
        protected virtual double MegawattsPerSquareMeterTolerance { get { return 1e-5; } }
        protected virtual double MicrowattsPerSquareCentimeterTolerance { get { return 1e-5; } }
        protected virtual double MicrowattsPerSquareMeterTolerance { get { return 1e-5; } }
        protected virtual double MilliwattsPerSquareCentimeterTolerance { get { return 1e-5; } }
        protected virtual double MilliwattsPerSquareMeterTolerance { get { return 1e-5; } }
        protected virtual double NanowattsPerSquareCentimeterTolerance { get { return 1e-5; } }
        protected virtual double NanowattsPerSquareMeterTolerance { get { return 1e-5; } }
        protected virtual double PicowattsPerSquareCentimeterTolerance { get { return 1e-5; } }
        protected virtual double PicowattsPerSquareMeterTolerance { get { return 1e-5; } }
        protected virtual double WattsPerSquareCentimeterTolerance { get { return 1e-5; } }
        protected virtual double WattsPerSquareMeterTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        [Fact]
        public void Ctor_WithUndefinedUnit_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new Irradiance((double)0.0, IrradianceUnit.Undefined));
        }

        [Fact]
        public void Ctor_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new Irradiance(double.PositiveInfinity, IrradianceUnit.WattPerSquareMeter));
            Assert.Throws<ArgumentException>(() => new Irradiance(double.NegativeInfinity, IrradianceUnit.WattPerSquareMeter));
        }

        [Fact]
        public void Ctor_WithNaNValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new Irradiance(double.NaN, IrradianceUnit.WattPerSquareMeter));
        }

        [Fact]
        public void Ctor_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            Assert.Throws<ArgumentException>(() => new Irradiance(1, UnitSystem.SI));
            Assert.Throws<ArgumentException>(() => new Irradiance(1, UnitSystem.CGS));
            Assert.Throws<ArgumentException>(() => new Irradiance(1, UnitSystem.BI));
            Assert.Throws<ArgumentException>(() => new Irradiance(1, UnitSystem.EE));
            Assert.Throws<ArgumentException>(() => new Irradiance(1, UnitSystem.USC));
            Assert.Throws<ArgumentException>(() => new Irradiance(1, UnitSystem.FPS));
            Assert.Throws<ArgumentException>(() => new Irradiance(1, UnitSystem.Astronomical));
        }

        [Fact]
        public void Ctor_WithNullUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new Irradiance(1, null));
        }

        [Fact]
        public void WattPerSquareMeterToIrradianceUnits()
        {
            Irradiance wattpersquaremeter = Irradiance.FromWattsPerSquareMeter(1);
            AssertEx.EqualTolerance(KilowattsPerSquareCentimeterInOneWattPerSquareMeter, wattpersquaremeter.KilowattsPerSquareCentimeter, KilowattsPerSquareCentimeterTolerance);
            AssertEx.EqualTolerance(KilowattsPerSquareMeterInOneWattPerSquareMeter, wattpersquaremeter.KilowattsPerSquareMeter, KilowattsPerSquareMeterTolerance);
            AssertEx.EqualTolerance(MegawattsPerSquareCentimeterInOneWattPerSquareMeter, wattpersquaremeter.MegawattsPerSquareCentimeter, MegawattsPerSquareCentimeterTolerance);
            AssertEx.EqualTolerance(MegawattsPerSquareMeterInOneWattPerSquareMeter, wattpersquaremeter.MegawattsPerSquareMeter, MegawattsPerSquareMeterTolerance);
            AssertEx.EqualTolerance(MicrowattsPerSquareCentimeterInOneWattPerSquareMeter, wattpersquaremeter.MicrowattsPerSquareCentimeter, MicrowattsPerSquareCentimeterTolerance);
            AssertEx.EqualTolerance(MicrowattsPerSquareMeterInOneWattPerSquareMeter, wattpersquaremeter.MicrowattsPerSquareMeter, MicrowattsPerSquareMeterTolerance);
            AssertEx.EqualTolerance(MilliwattsPerSquareCentimeterInOneWattPerSquareMeter, wattpersquaremeter.MilliwattsPerSquareCentimeter, MilliwattsPerSquareCentimeterTolerance);
            AssertEx.EqualTolerance(MilliwattsPerSquareMeterInOneWattPerSquareMeter, wattpersquaremeter.MilliwattsPerSquareMeter, MilliwattsPerSquareMeterTolerance);
            AssertEx.EqualTolerance(NanowattsPerSquareCentimeterInOneWattPerSquareMeter, wattpersquaremeter.NanowattsPerSquareCentimeter, NanowattsPerSquareCentimeterTolerance);
            AssertEx.EqualTolerance(NanowattsPerSquareMeterInOneWattPerSquareMeter, wattpersquaremeter.NanowattsPerSquareMeter, NanowattsPerSquareMeterTolerance);
            AssertEx.EqualTolerance(PicowattsPerSquareCentimeterInOneWattPerSquareMeter, wattpersquaremeter.PicowattsPerSquareCentimeter, PicowattsPerSquareCentimeterTolerance);
            AssertEx.EqualTolerance(PicowattsPerSquareMeterInOneWattPerSquareMeter, wattpersquaremeter.PicowattsPerSquareMeter, PicowattsPerSquareMeterTolerance);
            AssertEx.EqualTolerance(WattsPerSquareCentimeterInOneWattPerSquareMeter, wattpersquaremeter.WattsPerSquareCentimeter, WattsPerSquareCentimeterTolerance);
            AssertEx.EqualTolerance(WattsPerSquareMeterInOneWattPerSquareMeter, wattpersquaremeter.WattsPerSquareMeter, WattsPerSquareMeterTolerance);
        }

        [Fact]
        public void FromValueAndUnit()
        {
            AssertEx.EqualTolerance(1, Irradiance.From(1, IrradianceUnit.KilowattPerSquareCentimeter).KilowattsPerSquareCentimeter, KilowattsPerSquareCentimeterTolerance);
            AssertEx.EqualTolerance(1, Irradiance.From(1, IrradianceUnit.KilowattPerSquareMeter).KilowattsPerSquareMeter, KilowattsPerSquareMeterTolerance);
            AssertEx.EqualTolerance(1, Irradiance.From(1, IrradianceUnit.MegawattPerSquareCentimeter).MegawattsPerSquareCentimeter, MegawattsPerSquareCentimeterTolerance);
            AssertEx.EqualTolerance(1, Irradiance.From(1, IrradianceUnit.MegawattPerSquareMeter).MegawattsPerSquareMeter, MegawattsPerSquareMeterTolerance);
            AssertEx.EqualTolerance(1, Irradiance.From(1, IrradianceUnit.MicrowattPerSquareCentimeter).MicrowattsPerSquareCentimeter, MicrowattsPerSquareCentimeterTolerance);
            AssertEx.EqualTolerance(1, Irradiance.From(1, IrradianceUnit.MicrowattPerSquareMeter).MicrowattsPerSquareMeter, MicrowattsPerSquareMeterTolerance);
            AssertEx.EqualTolerance(1, Irradiance.From(1, IrradianceUnit.MilliwattPerSquareCentimeter).MilliwattsPerSquareCentimeter, MilliwattsPerSquareCentimeterTolerance);
            AssertEx.EqualTolerance(1, Irradiance.From(1, IrradianceUnit.MilliwattPerSquareMeter).MilliwattsPerSquareMeter, MilliwattsPerSquareMeterTolerance);
            AssertEx.EqualTolerance(1, Irradiance.From(1, IrradianceUnit.NanowattPerSquareCentimeter).NanowattsPerSquareCentimeter, NanowattsPerSquareCentimeterTolerance);
            AssertEx.EqualTolerance(1, Irradiance.From(1, IrradianceUnit.NanowattPerSquareMeter).NanowattsPerSquareMeter, NanowattsPerSquareMeterTolerance);
            AssertEx.EqualTolerance(1, Irradiance.From(1, IrradianceUnit.PicowattPerSquareCentimeter).PicowattsPerSquareCentimeter, PicowattsPerSquareCentimeterTolerance);
            AssertEx.EqualTolerance(1, Irradiance.From(1, IrradianceUnit.PicowattPerSquareMeter).PicowattsPerSquareMeter, PicowattsPerSquareMeterTolerance);
            AssertEx.EqualTolerance(1, Irradiance.From(1, IrradianceUnit.WattPerSquareCentimeter).WattsPerSquareCentimeter, WattsPerSquareCentimeterTolerance);
            AssertEx.EqualTolerance(1, Irradiance.From(1, IrradianceUnit.WattPerSquareMeter).WattsPerSquareMeter, WattsPerSquareMeterTolerance);
        }

        [Fact]
        public void FromWattsPerSquareMeter_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => Irradiance.FromWattsPerSquareMeter(double.PositiveInfinity));
            Assert.Throws<ArgumentException>(() => Irradiance.FromWattsPerSquareMeter(double.NegativeInfinity));
        }

        [Fact]
        public void FromWattsPerSquareMeter_WithNanValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => Irradiance.FromWattsPerSquareMeter(double.NaN));
        }

        [Fact]
        public void As()
        {
            var wattpersquaremeter = Irradiance.FromWattsPerSquareMeter(1);
            AssertEx.EqualTolerance(KilowattsPerSquareCentimeterInOneWattPerSquareMeter, wattpersquaremeter.As(IrradianceUnit.KilowattPerSquareCentimeter), KilowattsPerSquareCentimeterTolerance);
            AssertEx.EqualTolerance(KilowattsPerSquareMeterInOneWattPerSquareMeter, wattpersquaremeter.As(IrradianceUnit.KilowattPerSquareMeter), KilowattsPerSquareMeterTolerance);
            AssertEx.EqualTolerance(MegawattsPerSquareCentimeterInOneWattPerSquareMeter, wattpersquaremeter.As(IrradianceUnit.MegawattPerSquareCentimeter), MegawattsPerSquareCentimeterTolerance);
            AssertEx.EqualTolerance(MegawattsPerSquareMeterInOneWattPerSquareMeter, wattpersquaremeter.As(IrradianceUnit.MegawattPerSquareMeter), MegawattsPerSquareMeterTolerance);
            AssertEx.EqualTolerance(MicrowattsPerSquareCentimeterInOneWattPerSquareMeter, wattpersquaremeter.As(IrradianceUnit.MicrowattPerSquareCentimeter), MicrowattsPerSquareCentimeterTolerance);
            AssertEx.EqualTolerance(MicrowattsPerSquareMeterInOneWattPerSquareMeter, wattpersquaremeter.As(IrradianceUnit.MicrowattPerSquareMeter), MicrowattsPerSquareMeterTolerance);
            AssertEx.EqualTolerance(MilliwattsPerSquareCentimeterInOneWattPerSquareMeter, wattpersquaremeter.As(IrradianceUnit.MilliwattPerSquareCentimeter), MilliwattsPerSquareCentimeterTolerance);
            AssertEx.EqualTolerance(MilliwattsPerSquareMeterInOneWattPerSquareMeter, wattpersquaremeter.As(IrradianceUnit.MilliwattPerSquareMeter), MilliwattsPerSquareMeterTolerance);
            AssertEx.EqualTolerance(NanowattsPerSquareCentimeterInOneWattPerSquareMeter, wattpersquaremeter.As(IrradianceUnit.NanowattPerSquareCentimeter), NanowattsPerSquareCentimeterTolerance);
            AssertEx.EqualTolerance(NanowattsPerSquareMeterInOneWattPerSquareMeter, wattpersquaremeter.As(IrradianceUnit.NanowattPerSquareMeter), NanowattsPerSquareMeterTolerance);
            AssertEx.EqualTolerance(PicowattsPerSquareCentimeterInOneWattPerSquareMeter, wattpersquaremeter.As(IrradianceUnit.PicowattPerSquareCentimeter), PicowattsPerSquareCentimeterTolerance);
            AssertEx.EqualTolerance(PicowattsPerSquareMeterInOneWattPerSquareMeter, wattpersquaremeter.As(IrradianceUnit.PicowattPerSquareMeter), PicowattsPerSquareMeterTolerance);
            AssertEx.EqualTolerance(WattsPerSquareCentimeterInOneWattPerSquareMeter, wattpersquaremeter.As(IrradianceUnit.WattPerSquareCentimeter), WattsPerSquareCentimeterTolerance);
            AssertEx.EqualTolerance(WattsPerSquareMeterInOneWattPerSquareMeter, wattpersquaremeter.As(IrradianceUnit.WattPerSquareMeter), WattsPerSquareMeterTolerance);
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var wattpersquaremeter = Irradiance.FromWattsPerSquareMeter(1);

            Assert.Throws<ArgumentException>(() => wattpersquaremeter.As(UnitSystem.SI));
            Assert.Throws<ArgumentException>(() => wattpersquaremeter.As(UnitSystem.CGS));
            Assert.Throws<ArgumentException>(() => wattpersquaremeter.As(UnitSystem.BI));
            Assert.Throws<ArgumentException>(() => wattpersquaremeter.As(UnitSystem.EE));
            Assert.Throws<ArgumentException>(() => wattpersquaremeter.As(UnitSystem.USC));
            Assert.Throws<ArgumentException>(() => wattpersquaremeter.As(UnitSystem.FPS));
            Assert.Throws<ArgumentException>(() => wattpersquaremeter.As(UnitSystem.Astronomical));
        }

        [Fact]
        public void As_WithNullUnitSystem_ThrowsArgumentNullException()
        {
            var wattpersquaremeter = Irradiance.FromWattsPerSquareMeter(1);
 
            Assert.Throws<ArgumentNullException>(() => wattpersquaremeter.As(null));
        }

        [Fact]
        public void ToUnit()
        {
            var wattpersquaremeter = Irradiance.FromWattsPerSquareMeter(1);

            var kilowattpersquarecentimeterQuantity = wattpersquaremeter.ToUnit(IrradianceUnit.KilowattPerSquareCentimeter);
            AssertEx.EqualTolerance(KilowattsPerSquareCentimeterInOneWattPerSquareMeter, (double)kilowattpersquarecentimeterQuantity.Value, KilowattsPerSquareCentimeterTolerance);
            Assert.Equal(IrradianceUnit.KilowattPerSquareCentimeter, kilowattpersquarecentimeterQuantity.Unit);

            var kilowattpersquaremeterQuantity = wattpersquaremeter.ToUnit(IrradianceUnit.KilowattPerSquareMeter);
            AssertEx.EqualTolerance(KilowattsPerSquareMeterInOneWattPerSquareMeter, (double)kilowattpersquaremeterQuantity.Value, KilowattsPerSquareMeterTolerance);
            Assert.Equal(IrradianceUnit.KilowattPerSquareMeter, kilowattpersquaremeterQuantity.Unit);

            var megawattpersquarecentimeterQuantity = wattpersquaremeter.ToUnit(IrradianceUnit.MegawattPerSquareCentimeter);
            AssertEx.EqualTolerance(MegawattsPerSquareCentimeterInOneWattPerSquareMeter, (double)megawattpersquarecentimeterQuantity.Value, MegawattsPerSquareCentimeterTolerance);
            Assert.Equal(IrradianceUnit.MegawattPerSquareCentimeter, megawattpersquarecentimeterQuantity.Unit);

            var megawattpersquaremeterQuantity = wattpersquaremeter.ToUnit(IrradianceUnit.MegawattPerSquareMeter);
            AssertEx.EqualTolerance(MegawattsPerSquareMeterInOneWattPerSquareMeter, (double)megawattpersquaremeterQuantity.Value, MegawattsPerSquareMeterTolerance);
            Assert.Equal(IrradianceUnit.MegawattPerSquareMeter, megawattpersquaremeterQuantity.Unit);

            var microwattpersquarecentimeterQuantity = wattpersquaremeter.ToUnit(IrradianceUnit.MicrowattPerSquareCentimeter);
            AssertEx.EqualTolerance(MicrowattsPerSquareCentimeterInOneWattPerSquareMeter, (double)microwattpersquarecentimeterQuantity.Value, MicrowattsPerSquareCentimeterTolerance);
            Assert.Equal(IrradianceUnit.MicrowattPerSquareCentimeter, microwattpersquarecentimeterQuantity.Unit);

            var microwattpersquaremeterQuantity = wattpersquaremeter.ToUnit(IrradianceUnit.MicrowattPerSquareMeter);
            AssertEx.EqualTolerance(MicrowattsPerSquareMeterInOneWattPerSquareMeter, (double)microwattpersquaremeterQuantity.Value, MicrowattsPerSquareMeterTolerance);
            Assert.Equal(IrradianceUnit.MicrowattPerSquareMeter, microwattpersquaremeterQuantity.Unit);

            var milliwattpersquarecentimeterQuantity = wattpersquaremeter.ToUnit(IrradianceUnit.MilliwattPerSquareCentimeter);
            AssertEx.EqualTolerance(MilliwattsPerSquareCentimeterInOneWattPerSquareMeter, (double)milliwattpersquarecentimeterQuantity.Value, MilliwattsPerSquareCentimeterTolerance);
            Assert.Equal(IrradianceUnit.MilliwattPerSquareCentimeter, milliwattpersquarecentimeterQuantity.Unit);

            var milliwattpersquaremeterQuantity = wattpersquaremeter.ToUnit(IrradianceUnit.MilliwattPerSquareMeter);
            AssertEx.EqualTolerance(MilliwattsPerSquareMeterInOneWattPerSquareMeter, (double)milliwattpersquaremeterQuantity.Value, MilliwattsPerSquareMeterTolerance);
            Assert.Equal(IrradianceUnit.MilliwattPerSquareMeter, milliwattpersquaremeterQuantity.Unit);

            var nanowattpersquarecentimeterQuantity = wattpersquaremeter.ToUnit(IrradianceUnit.NanowattPerSquareCentimeter);
            AssertEx.EqualTolerance(NanowattsPerSquareCentimeterInOneWattPerSquareMeter, (double)nanowattpersquarecentimeterQuantity.Value, NanowattsPerSquareCentimeterTolerance);
            Assert.Equal(IrradianceUnit.NanowattPerSquareCentimeter, nanowattpersquarecentimeterQuantity.Unit);

            var nanowattpersquaremeterQuantity = wattpersquaremeter.ToUnit(IrradianceUnit.NanowattPerSquareMeter);
            AssertEx.EqualTolerance(NanowattsPerSquareMeterInOneWattPerSquareMeter, (double)nanowattpersquaremeterQuantity.Value, NanowattsPerSquareMeterTolerance);
            Assert.Equal(IrradianceUnit.NanowattPerSquareMeter, nanowattpersquaremeterQuantity.Unit);

            var picowattpersquarecentimeterQuantity = wattpersquaremeter.ToUnit(IrradianceUnit.PicowattPerSquareCentimeter);
            AssertEx.EqualTolerance(PicowattsPerSquareCentimeterInOneWattPerSquareMeter, (double)picowattpersquarecentimeterQuantity.Value, PicowattsPerSquareCentimeterTolerance);
            Assert.Equal(IrradianceUnit.PicowattPerSquareCentimeter, picowattpersquarecentimeterQuantity.Unit);

            var picowattpersquaremeterQuantity = wattpersquaremeter.ToUnit(IrradianceUnit.PicowattPerSquareMeter);
            AssertEx.EqualTolerance(PicowattsPerSquareMeterInOneWattPerSquareMeter, (double)picowattpersquaremeterQuantity.Value, PicowattsPerSquareMeterTolerance);
            Assert.Equal(IrradianceUnit.PicowattPerSquareMeter, picowattpersquaremeterQuantity.Unit);

            var wattpersquarecentimeterQuantity = wattpersquaremeter.ToUnit(IrradianceUnit.WattPerSquareCentimeter);
            AssertEx.EqualTolerance(WattsPerSquareCentimeterInOneWattPerSquareMeter, (double)wattpersquarecentimeterQuantity.Value, WattsPerSquareCentimeterTolerance);
            Assert.Equal(IrradianceUnit.WattPerSquareCentimeter, wattpersquarecentimeterQuantity.Unit);

            var wattpersquaremeterQuantity = wattpersquaremeter.ToUnit(IrradianceUnit.WattPerSquareMeter);
            AssertEx.EqualTolerance(WattsPerSquareMeterInOneWattPerSquareMeter, (double)wattpersquaremeterQuantity.Value, WattsPerSquareMeterTolerance);
            Assert.Equal(IrradianceUnit.WattPerSquareMeter, wattpersquaremeterQuantity.Unit);
        }

        [Fact]
        public void To_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var wattpersquaremeter = Irradiance.FromWattsPerSquareMeter(1);

            Assert.Throws<ArgumentException>(() => wattpersquaremeter.ToUnit(UnitSystem.SI));
            Assert.Throws<ArgumentException>(() => wattpersquaremeter.ToUnit(UnitSystem.CGS));
            Assert.Throws<ArgumentException>(() => wattpersquaremeter.ToUnit(UnitSystem.BI));
            Assert.Throws<ArgumentException>(() => wattpersquaremeter.ToUnit(UnitSystem.EE));
            Assert.Throws<ArgumentException>(() => wattpersquaremeter.ToUnit(UnitSystem.USC));
            Assert.Throws<ArgumentException>(() => wattpersquaremeter.ToUnit(UnitSystem.FPS));
            Assert.Throws<ArgumentException>(() => wattpersquaremeter.ToUnit(UnitSystem.Astronomical));
        }

        [Fact]
        public void ToUnit_WithNullUnitSystem_ThrowsNullException()
        {
            var wattpersquaremeter = Irradiance.FromWattsPerSquareMeter(1);
 
            Assert.Throws<ArgumentNullException>(() => wattpersquaremeter.ToUnit(null));
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            Irradiance wattpersquaremeter = Irradiance.FromWattsPerSquareMeter(1);
            AssertEx.EqualTolerance(1, Irradiance.FromKilowattsPerSquareCentimeter(wattpersquaremeter.KilowattsPerSquareCentimeter).WattsPerSquareMeter, KilowattsPerSquareCentimeterTolerance);
            AssertEx.EqualTolerance(1, Irradiance.FromKilowattsPerSquareMeter(wattpersquaremeter.KilowattsPerSquareMeter).WattsPerSquareMeter, KilowattsPerSquareMeterTolerance);
            AssertEx.EqualTolerance(1, Irradiance.FromMegawattsPerSquareCentimeter(wattpersquaremeter.MegawattsPerSquareCentimeter).WattsPerSquareMeter, MegawattsPerSquareCentimeterTolerance);
            AssertEx.EqualTolerance(1, Irradiance.FromMegawattsPerSquareMeter(wattpersquaremeter.MegawattsPerSquareMeter).WattsPerSquareMeter, MegawattsPerSquareMeterTolerance);
            AssertEx.EqualTolerance(1, Irradiance.FromMicrowattsPerSquareCentimeter(wattpersquaremeter.MicrowattsPerSquareCentimeter).WattsPerSquareMeter, MicrowattsPerSquareCentimeterTolerance);
            AssertEx.EqualTolerance(1, Irradiance.FromMicrowattsPerSquareMeter(wattpersquaremeter.MicrowattsPerSquareMeter).WattsPerSquareMeter, MicrowattsPerSquareMeterTolerance);
            AssertEx.EqualTolerance(1, Irradiance.FromMilliwattsPerSquareCentimeter(wattpersquaremeter.MilliwattsPerSquareCentimeter).WattsPerSquareMeter, MilliwattsPerSquareCentimeterTolerance);
            AssertEx.EqualTolerance(1, Irradiance.FromMilliwattsPerSquareMeter(wattpersquaremeter.MilliwattsPerSquareMeter).WattsPerSquareMeter, MilliwattsPerSquareMeterTolerance);
            AssertEx.EqualTolerance(1, Irradiance.FromNanowattsPerSquareCentimeter(wattpersquaremeter.NanowattsPerSquareCentimeter).WattsPerSquareMeter, NanowattsPerSquareCentimeterTolerance);
            AssertEx.EqualTolerance(1, Irradiance.FromNanowattsPerSquareMeter(wattpersquaremeter.NanowattsPerSquareMeter).WattsPerSquareMeter, NanowattsPerSquareMeterTolerance);
            AssertEx.EqualTolerance(1, Irradiance.FromPicowattsPerSquareCentimeter(wattpersquaremeter.PicowattsPerSquareCentimeter).WattsPerSquareMeter, PicowattsPerSquareCentimeterTolerance);
            AssertEx.EqualTolerance(1, Irradiance.FromPicowattsPerSquareMeter(wattpersquaremeter.PicowattsPerSquareMeter).WattsPerSquareMeter, PicowattsPerSquareMeterTolerance);
            AssertEx.EqualTolerance(1, Irradiance.FromWattsPerSquareCentimeter(wattpersquaremeter.WattsPerSquareCentimeter).WattsPerSquareMeter, WattsPerSquareCentimeterTolerance);
            AssertEx.EqualTolerance(1, Irradiance.FromWattsPerSquareMeter(wattpersquaremeter.WattsPerSquareMeter).WattsPerSquareMeter, WattsPerSquareMeterTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            Irradiance v = Irradiance.FromWattsPerSquareMeter(1);
            AssertEx.EqualTolerance(-1, -v.WattsPerSquareMeter, WattsPerSquareMeterTolerance);
            AssertEx.EqualTolerance(2, (Irradiance.FromWattsPerSquareMeter(3)-v).WattsPerSquareMeter, WattsPerSquareMeterTolerance);
            AssertEx.EqualTolerance(2, (v + v).WattsPerSquareMeter, WattsPerSquareMeterTolerance);
            AssertEx.EqualTolerance(10, (v*10).WattsPerSquareMeter, WattsPerSquareMeterTolerance);
            AssertEx.EqualTolerance(10, (10*v).WattsPerSquareMeter, WattsPerSquareMeterTolerance);
            AssertEx.EqualTolerance(2, (Irradiance.FromWattsPerSquareMeter(10)/5).WattsPerSquareMeter, WattsPerSquareMeterTolerance);
            AssertEx.EqualTolerance(2, Irradiance.FromWattsPerSquareMeter(10)/Irradiance.FromWattsPerSquareMeter(5), WattsPerSquareMeterTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            Irradiance oneWattPerSquareMeter = Irradiance.FromWattsPerSquareMeter(1);
            Irradiance twoWattsPerSquareMeter = Irradiance.FromWattsPerSquareMeter(2);

            Assert.True(oneWattPerSquareMeter < twoWattsPerSquareMeter);
            Assert.True(oneWattPerSquareMeter <= twoWattsPerSquareMeter);
            Assert.True(twoWattsPerSquareMeter > oneWattPerSquareMeter);
            Assert.True(twoWattsPerSquareMeter >= oneWattPerSquareMeter);

            Assert.False(oneWattPerSquareMeter > twoWattsPerSquareMeter);
            Assert.False(oneWattPerSquareMeter >= twoWattsPerSquareMeter);
            Assert.False(twoWattsPerSquareMeter < oneWattPerSquareMeter);
            Assert.False(twoWattsPerSquareMeter <= oneWattPerSquareMeter);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            Irradiance wattpersquaremeter = Irradiance.FromWattsPerSquareMeter(1);
            Assert.Equal(0, wattpersquaremeter.CompareTo(wattpersquaremeter));
            Assert.True(wattpersquaremeter.CompareTo(Irradiance.Zero) > 0);
            Assert.True(Irradiance.Zero.CompareTo(wattpersquaremeter) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            Irradiance wattpersquaremeter = Irradiance.FromWattsPerSquareMeter(1);
            Assert.Throws<ArgumentException>(() => wattpersquaremeter.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            Irradiance wattpersquaremeter = Irradiance.FromWattsPerSquareMeter(1);
            Assert.Throws<ArgumentNullException>(() => wattpersquaremeter.CompareTo(null));
        }

        [Fact]
        public void EqualityOperators()
        {
            var a = Irradiance.FromWattsPerSquareMeter(1);
            var b = Irradiance.FromWattsPerSquareMeter(2);

 // ReSharper disable EqualExpressionComparison

            Assert.True(a == a);
            Assert.False(a != a);

            Assert.True(a != b);
            Assert.False(a == b);

            Assert.False(a == null);
            Assert.False(null == a);

// ReSharper restore EqualExpressionComparison
        }

        [Fact]
        public void EqualsIsImplemented()
        {
            var a = Irradiance.FromWattsPerSquareMeter(1);
            var b = Irradiance.FromWattsPerSquareMeter(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
            Assert.False(a.Equals(null));
        }

        [Fact]
        public void EqualsRelativeToleranceIsImplemented()
        {
            var v = Irradiance.FromWattsPerSquareMeter(1);
            Assert.True(v.Equals(Irradiance.FromWattsPerSquareMeter(1), WattsPerSquareMeterTolerance, ComparisonType.Relative));
            Assert.False(v.Equals(Irradiance.Zero, WattsPerSquareMeterTolerance, ComparisonType.Relative));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            Irradiance wattpersquaremeter = Irradiance.FromWattsPerSquareMeter(1);
            Assert.False(wattpersquaremeter.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            Irradiance wattpersquaremeter = Irradiance.FromWattsPerSquareMeter(1);
            Assert.False(wattpersquaremeter.Equals(null));
        }

        [Fact]
        public void UnitsDoesNotContainUndefined()
        {
            Assert.DoesNotContain(IrradianceUnit.Undefined, Irradiance.Units);
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues(typeof(IrradianceUnit)).Cast<IrradianceUnit>();
            foreach(var unit in units)
            {
                if(unit == IrradianceUnit.Undefined)
                    continue;

                var defaultAbbreviation = UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(Irradiance.BaseDimensions is null);
        }
    }
}
