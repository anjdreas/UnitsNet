//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Linq;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of Volume.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class VolumeTestsBase
    {
        protected abstract double AcreFeetInOneCubicMeter { get; }
        protected abstract double AuTablespoonsInOneCubicMeter { get; }
        protected abstract double CentilitersInOneCubicMeter { get; }
        protected abstract double CubicCentimetersInOneCubicMeter { get; }
        protected abstract double CubicDecimetersInOneCubicMeter { get; }
        protected abstract double CubicFeetInOneCubicMeter { get; }
        protected abstract double CubicHectometersInOneCubicMeter { get; }
        protected abstract double CubicInchesInOneCubicMeter { get; }
        protected abstract double CubicKilometersInOneCubicMeter { get; }
        protected abstract double CubicMetersInOneCubicMeter { get; }
        protected abstract double CubicMicrometersInOneCubicMeter { get; }
        protected abstract double CubicMilesInOneCubicMeter { get; }
        protected abstract double CubicMillimetersInOneCubicMeter { get; }
        protected abstract double CubicYardsInOneCubicMeter { get; }
        protected abstract double DecilitersInOneCubicMeter { get; }
        protected abstract double HectocubicFeetInOneCubicMeter { get; }
        protected abstract double HectocubicMetersInOneCubicMeter { get; }
        protected abstract double HectolitersInOneCubicMeter { get; }
        protected abstract double ImperialBeerBarrelsInOneCubicMeter { get; }
        protected abstract double ImperialGallonsInOneCubicMeter { get; }
        protected abstract double ImperialOuncesInOneCubicMeter { get; }
        protected abstract double ImperialPintsInOneCubicMeter { get; }
        protected abstract double KilocubicFeetInOneCubicMeter { get; }
        protected abstract double KilocubicMetersInOneCubicMeter { get; }
        protected abstract double KiloimperialGallonsInOneCubicMeter { get; }
        protected abstract double KilolitersInOneCubicMeter { get; }
        protected abstract double KilousGallonsInOneCubicMeter { get; }
        protected abstract double LitersInOneCubicMeter { get; }
        protected abstract double MegacubicFeetInOneCubicMeter { get; }
        protected abstract double MegaimperialGallonsInOneCubicMeter { get; }
        protected abstract double MegalitersInOneCubicMeter { get; }
        protected abstract double MegausGallonsInOneCubicMeter { get; }
        protected abstract double MetricCupsInOneCubicMeter { get; }
        protected abstract double MetricTeaspoonsInOneCubicMeter { get; }
        protected abstract double MicrolitersInOneCubicMeter { get; }
        protected abstract double MillilitersInOneCubicMeter { get; }
        protected abstract double OilBarrelsInOneCubicMeter { get; }
        protected abstract double UkTablespoonsInOneCubicMeter { get; }
        protected abstract double UsBeerBarrelsInOneCubicMeter { get; }
        protected abstract double UsCustomaryCupsInOneCubicMeter { get; }
        protected abstract double UsGallonsInOneCubicMeter { get; }
        protected abstract double UsLegalCupsInOneCubicMeter { get; }
        protected abstract double UsOuncesInOneCubicMeter { get; }
        protected abstract double UsPintsInOneCubicMeter { get; }
        protected abstract double UsQuartsInOneCubicMeter { get; }
        protected abstract double UsTablespoonsInOneCubicMeter { get; }
        protected abstract double UsTeaspoonsInOneCubicMeter { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double AcreFeetTolerance { get { return 1e-5; } }
        protected virtual double AuTablespoonsTolerance { get { return 1e-5; } }
        protected virtual double CentilitersTolerance { get { return 1e-5; } }
        protected virtual double CubicCentimetersTolerance { get { return 1e-5; } }
        protected virtual double CubicDecimetersTolerance { get { return 1e-5; } }
        protected virtual double CubicFeetTolerance { get { return 1e-5; } }
        protected virtual double CubicHectometersTolerance { get { return 1e-5; } }
        protected virtual double CubicInchesTolerance { get { return 1e-5; } }
        protected virtual double CubicKilometersTolerance { get { return 1e-5; } }
        protected virtual double CubicMetersTolerance { get { return 1e-5; } }
        protected virtual double CubicMicrometersTolerance { get { return 1e-5; } }
        protected virtual double CubicMilesTolerance { get { return 1e-5; } }
        protected virtual double CubicMillimetersTolerance { get { return 1e-5; } }
        protected virtual double CubicYardsTolerance { get { return 1e-5; } }
        protected virtual double DecilitersTolerance { get { return 1e-5; } }
        protected virtual double HectocubicFeetTolerance { get { return 1e-5; } }
        protected virtual double HectocubicMetersTolerance { get { return 1e-5; } }
        protected virtual double HectolitersTolerance { get { return 1e-5; } }
        protected virtual double ImperialBeerBarrelsTolerance { get { return 1e-5; } }
        protected virtual double ImperialGallonsTolerance { get { return 1e-5; } }
        protected virtual double ImperialOuncesTolerance { get { return 1e-5; } }
        protected virtual double ImperialPintsTolerance { get { return 1e-5; } }
        protected virtual double KilocubicFeetTolerance { get { return 1e-5; } }
        protected virtual double KilocubicMetersTolerance { get { return 1e-5; } }
        protected virtual double KiloimperialGallonsTolerance { get { return 1e-5; } }
        protected virtual double KilolitersTolerance { get { return 1e-5; } }
        protected virtual double KilousGallonsTolerance { get { return 1e-5; } }
        protected virtual double LitersTolerance { get { return 1e-5; } }
        protected virtual double MegacubicFeetTolerance { get { return 1e-5; } }
        protected virtual double MegaimperialGallonsTolerance { get { return 1e-5; } }
        protected virtual double MegalitersTolerance { get { return 1e-5; } }
        protected virtual double MegausGallonsTolerance { get { return 1e-5; } }
        protected virtual double MetricCupsTolerance { get { return 1e-5; } }
        protected virtual double MetricTeaspoonsTolerance { get { return 1e-5; } }
        protected virtual double MicrolitersTolerance { get { return 1e-5; } }
        protected virtual double MillilitersTolerance { get { return 1e-5; } }
        protected virtual double OilBarrelsTolerance { get { return 1e-5; } }
        protected virtual double UkTablespoonsTolerance { get { return 1e-5; } }
        protected virtual double UsBeerBarrelsTolerance { get { return 1e-5; } }
        protected virtual double UsCustomaryCupsTolerance { get { return 1e-5; } }
        protected virtual double UsGallonsTolerance { get { return 1e-5; } }
        protected virtual double UsLegalCupsTolerance { get { return 1e-5; } }
        protected virtual double UsOuncesTolerance { get { return 1e-5; } }
        protected virtual double UsPintsTolerance { get { return 1e-5; } }
        protected virtual double UsQuartsTolerance { get { return 1e-5; } }
        protected virtual double UsTablespoonsTolerance { get { return 1e-5; } }
        protected virtual double UsTeaspoonsTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        [Fact]
        public void Ctor_WithUndefinedUnit_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new Volume((double)0.0, VolumeUnit.Undefined));
        }

        [Fact]
        public void Ctor_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new Volume(double.PositiveInfinity, VolumeUnit.CubicMeter));
            Assert.Throws<ArgumentException>(() => new Volume(double.NegativeInfinity, VolumeUnit.CubicMeter));
        }

        [Fact]
        public void Ctor_WithNaNValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new Volume(double.NaN, VolumeUnit.CubicMeter));
        }

        [Fact]
        public void Ctor_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var siQuantity = new Volume(1, UnitSystem.SI);
            Assert.Equal(1, (double)siQuantity.Value);
            Assert.Equal(VolumeUnit.CubicMeter, siQuantity.Unit);

            var cgsQuantity = new Volume(1, UnitSystem.CGS);
            Assert.Equal(1, (double)cgsQuantity.Value);
            Assert.Equal(VolumeUnit.CubicCentimeter, cgsQuantity.Unit);

            var eeQuantity = new Volume(1, UnitSystem.EE);
            Assert.Equal(1, (double)eeQuantity.Value);
            Assert.Equal(VolumeUnit.CubicFoot, eeQuantity.Unit);

            Assert.Throws<ArgumentException>(() => new Volume(1, UnitSystem.BI));
            Assert.Throws<ArgumentException>(() => new Volume(1, UnitSystem.USC));
            Assert.Throws<ArgumentException>(() => new Volume(1, UnitSystem.FPS));
            Assert.Throws<ArgumentException>(() => new Volume(1, UnitSystem.Astronomical));
        }

        [Fact]
        public void Ctor_WithNullUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new Volume(1, null));
        }

        [Fact]
        public void CubicMeterToVolumeUnits()
        {
            Volume cubicmeter = Volume.FromCubicMeters(1);
            AssertEx.EqualTolerance(AcreFeetInOneCubicMeter, cubicmeter.AcreFeet, AcreFeetTolerance);
            AssertEx.EqualTolerance(AuTablespoonsInOneCubicMeter, cubicmeter.AuTablespoons, AuTablespoonsTolerance);
            AssertEx.EqualTolerance(CentilitersInOneCubicMeter, cubicmeter.Centiliters, CentilitersTolerance);
            AssertEx.EqualTolerance(CubicCentimetersInOneCubicMeter, cubicmeter.CubicCentimeters, CubicCentimetersTolerance);
            AssertEx.EqualTolerance(CubicDecimetersInOneCubicMeter, cubicmeter.CubicDecimeters, CubicDecimetersTolerance);
            AssertEx.EqualTolerance(CubicFeetInOneCubicMeter, cubicmeter.CubicFeet, CubicFeetTolerance);
            AssertEx.EqualTolerance(CubicHectometersInOneCubicMeter, cubicmeter.CubicHectometers, CubicHectometersTolerance);
            AssertEx.EqualTolerance(CubicInchesInOneCubicMeter, cubicmeter.CubicInches, CubicInchesTolerance);
            AssertEx.EqualTolerance(CubicKilometersInOneCubicMeter, cubicmeter.CubicKilometers, CubicKilometersTolerance);
            AssertEx.EqualTolerance(CubicMetersInOneCubicMeter, cubicmeter.CubicMeters, CubicMetersTolerance);
            AssertEx.EqualTolerance(CubicMicrometersInOneCubicMeter, cubicmeter.CubicMicrometers, CubicMicrometersTolerance);
            AssertEx.EqualTolerance(CubicMilesInOneCubicMeter, cubicmeter.CubicMiles, CubicMilesTolerance);
            AssertEx.EqualTolerance(CubicMillimetersInOneCubicMeter, cubicmeter.CubicMillimeters, CubicMillimetersTolerance);
            AssertEx.EqualTolerance(CubicYardsInOneCubicMeter, cubicmeter.CubicYards, CubicYardsTolerance);
            AssertEx.EqualTolerance(DecilitersInOneCubicMeter, cubicmeter.Deciliters, DecilitersTolerance);
            AssertEx.EqualTolerance(HectocubicFeetInOneCubicMeter, cubicmeter.HectocubicFeet, HectocubicFeetTolerance);
            AssertEx.EqualTolerance(HectocubicMetersInOneCubicMeter, cubicmeter.HectocubicMeters, HectocubicMetersTolerance);
            AssertEx.EqualTolerance(HectolitersInOneCubicMeter, cubicmeter.Hectoliters, HectolitersTolerance);
            AssertEx.EqualTolerance(ImperialBeerBarrelsInOneCubicMeter, cubicmeter.ImperialBeerBarrels, ImperialBeerBarrelsTolerance);
            AssertEx.EqualTolerance(ImperialGallonsInOneCubicMeter, cubicmeter.ImperialGallons, ImperialGallonsTolerance);
            AssertEx.EqualTolerance(ImperialOuncesInOneCubicMeter, cubicmeter.ImperialOunces, ImperialOuncesTolerance);
            AssertEx.EqualTolerance(ImperialPintsInOneCubicMeter, cubicmeter.ImperialPints, ImperialPintsTolerance);
            AssertEx.EqualTolerance(KilocubicFeetInOneCubicMeter, cubicmeter.KilocubicFeet, KilocubicFeetTolerance);
            AssertEx.EqualTolerance(KilocubicMetersInOneCubicMeter, cubicmeter.KilocubicMeters, KilocubicMetersTolerance);
            AssertEx.EqualTolerance(KiloimperialGallonsInOneCubicMeter, cubicmeter.KiloimperialGallons, KiloimperialGallonsTolerance);
            AssertEx.EqualTolerance(KilolitersInOneCubicMeter, cubicmeter.Kiloliters, KilolitersTolerance);
            AssertEx.EqualTolerance(KilousGallonsInOneCubicMeter, cubicmeter.KilousGallons, KilousGallonsTolerance);
            AssertEx.EqualTolerance(LitersInOneCubicMeter, cubicmeter.Liters, LitersTolerance);
            AssertEx.EqualTolerance(MegacubicFeetInOneCubicMeter, cubicmeter.MegacubicFeet, MegacubicFeetTolerance);
            AssertEx.EqualTolerance(MegaimperialGallonsInOneCubicMeter, cubicmeter.MegaimperialGallons, MegaimperialGallonsTolerance);
            AssertEx.EqualTolerance(MegalitersInOneCubicMeter, cubicmeter.Megaliters, MegalitersTolerance);
            AssertEx.EqualTolerance(MegausGallonsInOneCubicMeter, cubicmeter.MegausGallons, MegausGallonsTolerance);
            AssertEx.EqualTolerance(MetricCupsInOneCubicMeter, cubicmeter.MetricCups, MetricCupsTolerance);
            AssertEx.EqualTolerance(MetricTeaspoonsInOneCubicMeter, cubicmeter.MetricTeaspoons, MetricTeaspoonsTolerance);
            AssertEx.EqualTolerance(MicrolitersInOneCubicMeter, cubicmeter.Microliters, MicrolitersTolerance);
            AssertEx.EqualTolerance(MillilitersInOneCubicMeter, cubicmeter.Milliliters, MillilitersTolerance);
            AssertEx.EqualTolerance(OilBarrelsInOneCubicMeter, cubicmeter.OilBarrels, OilBarrelsTolerance);
            AssertEx.EqualTolerance(UkTablespoonsInOneCubicMeter, cubicmeter.UkTablespoons, UkTablespoonsTolerance);
            AssertEx.EqualTolerance(UsBeerBarrelsInOneCubicMeter, cubicmeter.UsBeerBarrels, UsBeerBarrelsTolerance);
            AssertEx.EqualTolerance(UsCustomaryCupsInOneCubicMeter, cubicmeter.UsCustomaryCups, UsCustomaryCupsTolerance);
            AssertEx.EqualTolerance(UsGallonsInOneCubicMeter, cubicmeter.UsGallons, UsGallonsTolerance);
            AssertEx.EqualTolerance(UsLegalCupsInOneCubicMeter, cubicmeter.UsLegalCups, UsLegalCupsTolerance);
            AssertEx.EqualTolerance(UsOuncesInOneCubicMeter, cubicmeter.UsOunces, UsOuncesTolerance);
            AssertEx.EqualTolerance(UsPintsInOneCubicMeter, cubicmeter.UsPints, UsPintsTolerance);
            AssertEx.EqualTolerance(UsQuartsInOneCubicMeter, cubicmeter.UsQuarts, UsQuartsTolerance);
            AssertEx.EqualTolerance(UsTablespoonsInOneCubicMeter, cubicmeter.UsTablespoons, UsTablespoonsTolerance);
            AssertEx.EqualTolerance(UsTeaspoonsInOneCubicMeter, cubicmeter.UsTeaspoons, UsTeaspoonsTolerance);
        }

        [Fact]
        public void FromValueAndUnit()
        {
            AssertEx.EqualTolerance(1, Volume.From(1, VolumeUnit.AcreFoot).AcreFeet, AcreFeetTolerance);
            AssertEx.EqualTolerance(1, Volume.From(1, VolumeUnit.AuTablespoon).AuTablespoons, AuTablespoonsTolerance);
            AssertEx.EqualTolerance(1, Volume.From(1, VolumeUnit.Centiliter).Centiliters, CentilitersTolerance);
            AssertEx.EqualTolerance(1, Volume.From(1, VolumeUnit.CubicCentimeter).CubicCentimeters, CubicCentimetersTolerance);
            AssertEx.EqualTolerance(1, Volume.From(1, VolumeUnit.CubicDecimeter).CubicDecimeters, CubicDecimetersTolerance);
            AssertEx.EqualTolerance(1, Volume.From(1, VolumeUnit.CubicFoot).CubicFeet, CubicFeetTolerance);
            AssertEx.EqualTolerance(1, Volume.From(1, VolumeUnit.CubicHectometer).CubicHectometers, CubicHectometersTolerance);
            AssertEx.EqualTolerance(1, Volume.From(1, VolumeUnit.CubicInch).CubicInches, CubicInchesTolerance);
            AssertEx.EqualTolerance(1, Volume.From(1, VolumeUnit.CubicKilometer).CubicKilometers, CubicKilometersTolerance);
            AssertEx.EqualTolerance(1, Volume.From(1, VolumeUnit.CubicMeter).CubicMeters, CubicMetersTolerance);
            AssertEx.EqualTolerance(1, Volume.From(1, VolumeUnit.CubicMicrometer).CubicMicrometers, CubicMicrometersTolerance);
            AssertEx.EqualTolerance(1, Volume.From(1, VolumeUnit.CubicMile).CubicMiles, CubicMilesTolerance);
            AssertEx.EqualTolerance(1, Volume.From(1, VolumeUnit.CubicMillimeter).CubicMillimeters, CubicMillimetersTolerance);
            AssertEx.EqualTolerance(1, Volume.From(1, VolumeUnit.CubicYard).CubicYards, CubicYardsTolerance);
            AssertEx.EqualTolerance(1, Volume.From(1, VolumeUnit.Deciliter).Deciliters, DecilitersTolerance);
            AssertEx.EqualTolerance(1, Volume.From(1, VolumeUnit.HectocubicFoot).HectocubicFeet, HectocubicFeetTolerance);
            AssertEx.EqualTolerance(1, Volume.From(1, VolumeUnit.HectocubicMeter).HectocubicMeters, HectocubicMetersTolerance);
            AssertEx.EqualTolerance(1, Volume.From(1, VolumeUnit.Hectoliter).Hectoliters, HectolitersTolerance);
            AssertEx.EqualTolerance(1, Volume.From(1, VolumeUnit.ImperialBeerBarrel).ImperialBeerBarrels, ImperialBeerBarrelsTolerance);
            AssertEx.EqualTolerance(1, Volume.From(1, VolumeUnit.ImperialGallon).ImperialGallons, ImperialGallonsTolerance);
            AssertEx.EqualTolerance(1, Volume.From(1, VolumeUnit.ImperialOunce).ImperialOunces, ImperialOuncesTolerance);
            AssertEx.EqualTolerance(1, Volume.From(1, VolumeUnit.ImperialPint).ImperialPints, ImperialPintsTolerance);
            AssertEx.EqualTolerance(1, Volume.From(1, VolumeUnit.KilocubicFoot).KilocubicFeet, KilocubicFeetTolerance);
            AssertEx.EqualTolerance(1, Volume.From(1, VolumeUnit.KilocubicMeter).KilocubicMeters, KilocubicMetersTolerance);
            AssertEx.EqualTolerance(1, Volume.From(1, VolumeUnit.KiloimperialGallon).KiloimperialGallons, KiloimperialGallonsTolerance);
            AssertEx.EqualTolerance(1, Volume.From(1, VolumeUnit.Kiloliter).Kiloliters, KilolitersTolerance);
            AssertEx.EqualTolerance(1, Volume.From(1, VolumeUnit.KilousGallon).KilousGallons, KilousGallonsTolerance);
            AssertEx.EqualTolerance(1, Volume.From(1, VolumeUnit.Liter).Liters, LitersTolerance);
            AssertEx.EqualTolerance(1, Volume.From(1, VolumeUnit.MegacubicFoot).MegacubicFeet, MegacubicFeetTolerance);
            AssertEx.EqualTolerance(1, Volume.From(1, VolumeUnit.MegaimperialGallon).MegaimperialGallons, MegaimperialGallonsTolerance);
            AssertEx.EqualTolerance(1, Volume.From(1, VolumeUnit.Megaliter).Megaliters, MegalitersTolerance);
            AssertEx.EqualTolerance(1, Volume.From(1, VolumeUnit.MegausGallon).MegausGallons, MegausGallonsTolerance);
            AssertEx.EqualTolerance(1, Volume.From(1, VolumeUnit.MetricCup).MetricCups, MetricCupsTolerance);
            AssertEx.EqualTolerance(1, Volume.From(1, VolumeUnit.MetricTeaspoon).MetricTeaspoons, MetricTeaspoonsTolerance);
            AssertEx.EqualTolerance(1, Volume.From(1, VolumeUnit.Microliter).Microliters, MicrolitersTolerance);
            AssertEx.EqualTolerance(1, Volume.From(1, VolumeUnit.Milliliter).Milliliters, MillilitersTolerance);
            AssertEx.EqualTolerance(1, Volume.From(1, VolumeUnit.OilBarrel).OilBarrels, OilBarrelsTolerance);
            AssertEx.EqualTolerance(1, Volume.From(1, VolumeUnit.UkTablespoon).UkTablespoons, UkTablespoonsTolerance);
            AssertEx.EqualTolerance(1, Volume.From(1, VolumeUnit.UsBeerBarrel).UsBeerBarrels, UsBeerBarrelsTolerance);
            AssertEx.EqualTolerance(1, Volume.From(1, VolumeUnit.UsCustomaryCup).UsCustomaryCups, UsCustomaryCupsTolerance);
            AssertEx.EqualTolerance(1, Volume.From(1, VolumeUnit.UsGallon).UsGallons, UsGallonsTolerance);
            AssertEx.EqualTolerance(1, Volume.From(1, VolumeUnit.UsLegalCup).UsLegalCups, UsLegalCupsTolerance);
            AssertEx.EqualTolerance(1, Volume.From(1, VolumeUnit.UsOunce).UsOunces, UsOuncesTolerance);
            AssertEx.EqualTolerance(1, Volume.From(1, VolumeUnit.UsPint).UsPints, UsPintsTolerance);
            AssertEx.EqualTolerance(1, Volume.From(1, VolumeUnit.UsQuart).UsQuarts, UsQuartsTolerance);
            AssertEx.EqualTolerance(1, Volume.From(1, VolumeUnit.UsTablespoon).UsTablespoons, UsTablespoonsTolerance);
            AssertEx.EqualTolerance(1, Volume.From(1, VolumeUnit.UsTeaspoon).UsTeaspoons, UsTeaspoonsTolerance);
        }

        [Fact]
        public void FromCubicMeters_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => Volume.FromCubicMeters(double.PositiveInfinity));
            Assert.Throws<ArgumentException>(() => Volume.FromCubicMeters(double.NegativeInfinity));
        }

        [Fact]
        public void FromCubicMeters_WithNanValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => Volume.FromCubicMeters(double.NaN));
        }

        [Fact]
        public void As()
        {
            var cubicmeter = Volume.FromCubicMeters(1);
            AssertEx.EqualTolerance(AcreFeetInOneCubicMeter, cubicmeter.As(VolumeUnit.AcreFoot), AcreFeetTolerance);
            AssertEx.EqualTolerance(AuTablespoonsInOneCubicMeter, cubicmeter.As(VolumeUnit.AuTablespoon), AuTablespoonsTolerance);
            AssertEx.EqualTolerance(CentilitersInOneCubicMeter, cubicmeter.As(VolumeUnit.Centiliter), CentilitersTolerance);
            AssertEx.EqualTolerance(CubicCentimetersInOneCubicMeter, cubicmeter.As(VolumeUnit.CubicCentimeter), CubicCentimetersTolerance);
            AssertEx.EqualTolerance(CubicDecimetersInOneCubicMeter, cubicmeter.As(VolumeUnit.CubicDecimeter), CubicDecimetersTolerance);
            AssertEx.EqualTolerance(CubicFeetInOneCubicMeter, cubicmeter.As(VolumeUnit.CubicFoot), CubicFeetTolerance);
            AssertEx.EqualTolerance(CubicHectometersInOneCubicMeter, cubicmeter.As(VolumeUnit.CubicHectometer), CubicHectometersTolerance);
            AssertEx.EqualTolerance(CubicInchesInOneCubicMeter, cubicmeter.As(VolumeUnit.CubicInch), CubicInchesTolerance);
            AssertEx.EqualTolerance(CubicKilometersInOneCubicMeter, cubicmeter.As(VolumeUnit.CubicKilometer), CubicKilometersTolerance);
            AssertEx.EqualTolerance(CubicMetersInOneCubicMeter, cubicmeter.As(VolumeUnit.CubicMeter), CubicMetersTolerance);
            AssertEx.EqualTolerance(CubicMicrometersInOneCubicMeter, cubicmeter.As(VolumeUnit.CubicMicrometer), CubicMicrometersTolerance);
            AssertEx.EqualTolerance(CubicMilesInOneCubicMeter, cubicmeter.As(VolumeUnit.CubicMile), CubicMilesTolerance);
            AssertEx.EqualTolerance(CubicMillimetersInOneCubicMeter, cubicmeter.As(VolumeUnit.CubicMillimeter), CubicMillimetersTolerance);
            AssertEx.EqualTolerance(CubicYardsInOneCubicMeter, cubicmeter.As(VolumeUnit.CubicYard), CubicYardsTolerance);
            AssertEx.EqualTolerance(DecilitersInOneCubicMeter, cubicmeter.As(VolumeUnit.Deciliter), DecilitersTolerance);
            AssertEx.EqualTolerance(HectocubicFeetInOneCubicMeter, cubicmeter.As(VolumeUnit.HectocubicFoot), HectocubicFeetTolerance);
            AssertEx.EqualTolerance(HectocubicMetersInOneCubicMeter, cubicmeter.As(VolumeUnit.HectocubicMeter), HectocubicMetersTolerance);
            AssertEx.EqualTolerance(HectolitersInOneCubicMeter, cubicmeter.As(VolumeUnit.Hectoliter), HectolitersTolerance);
            AssertEx.EqualTolerance(ImperialBeerBarrelsInOneCubicMeter, cubicmeter.As(VolumeUnit.ImperialBeerBarrel), ImperialBeerBarrelsTolerance);
            AssertEx.EqualTolerance(ImperialGallonsInOneCubicMeter, cubicmeter.As(VolumeUnit.ImperialGallon), ImperialGallonsTolerance);
            AssertEx.EqualTolerance(ImperialOuncesInOneCubicMeter, cubicmeter.As(VolumeUnit.ImperialOunce), ImperialOuncesTolerance);
            AssertEx.EqualTolerance(ImperialPintsInOneCubicMeter, cubicmeter.As(VolumeUnit.ImperialPint), ImperialPintsTolerance);
            AssertEx.EqualTolerance(KilocubicFeetInOneCubicMeter, cubicmeter.As(VolumeUnit.KilocubicFoot), KilocubicFeetTolerance);
            AssertEx.EqualTolerance(KilocubicMetersInOneCubicMeter, cubicmeter.As(VolumeUnit.KilocubicMeter), KilocubicMetersTolerance);
            AssertEx.EqualTolerance(KiloimperialGallonsInOneCubicMeter, cubicmeter.As(VolumeUnit.KiloimperialGallon), KiloimperialGallonsTolerance);
            AssertEx.EqualTolerance(KilolitersInOneCubicMeter, cubicmeter.As(VolumeUnit.Kiloliter), KilolitersTolerance);
            AssertEx.EqualTolerance(KilousGallonsInOneCubicMeter, cubicmeter.As(VolumeUnit.KilousGallon), KilousGallonsTolerance);
            AssertEx.EqualTolerance(LitersInOneCubicMeter, cubicmeter.As(VolumeUnit.Liter), LitersTolerance);
            AssertEx.EqualTolerance(MegacubicFeetInOneCubicMeter, cubicmeter.As(VolumeUnit.MegacubicFoot), MegacubicFeetTolerance);
            AssertEx.EqualTolerance(MegaimperialGallonsInOneCubicMeter, cubicmeter.As(VolumeUnit.MegaimperialGallon), MegaimperialGallonsTolerance);
            AssertEx.EqualTolerance(MegalitersInOneCubicMeter, cubicmeter.As(VolumeUnit.Megaliter), MegalitersTolerance);
            AssertEx.EqualTolerance(MegausGallonsInOneCubicMeter, cubicmeter.As(VolumeUnit.MegausGallon), MegausGallonsTolerance);
            AssertEx.EqualTolerance(MetricCupsInOneCubicMeter, cubicmeter.As(VolumeUnit.MetricCup), MetricCupsTolerance);
            AssertEx.EqualTolerance(MetricTeaspoonsInOneCubicMeter, cubicmeter.As(VolumeUnit.MetricTeaspoon), MetricTeaspoonsTolerance);
            AssertEx.EqualTolerance(MicrolitersInOneCubicMeter, cubicmeter.As(VolumeUnit.Microliter), MicrolitersTolerance);
            AssertEx.EqualTolerance(MillilitersInOneCubicMeter, cubicmeter.As(VolumeUnit.Milliliter), MillilitersTolerance);
            AssertEx.EqualTolerance(OilBarrelsInOneCubicMeter, cubicmeter.As(VolumeUnit.OilBarrel), OilBarrelsTolerance);
            AssertEx.EqualTolerance(UkTablespoonsInOneCubicMeter, cubicmeter.As(VolumeUnit.UkTablespoon), UkTablespoonsTolerance);
            AssertEx.EqualTolerance(UsBeerBarrelsInOneCubicMeter, cubicmeter.As(VolumeUnit.UsBeerBarrel), UsBeerBarrelsTolerance);
            AssertEx.EqualTolerance(UsCustomaryCupsInOneCubicMeter, cubicmeter.As(VolumeUnit.UsCustomaryCup), UsCustomaryCupsTolerance);
            AssertEx.EqualTolerance(UsGallonsInOneCubicMeter, cubicmeter.As(VolumeUnit.UsGallon), UsGallonsTolerance);
            AssertEx.EqualTolerance(UsLegalCupsInOneCubicMeter, cubicmeter.As(VolumeUnit.UsLegalCup), UsLegalCupsTolerance);
            AssertEx.EqualTolerance(UsOuncesInOneCubicMeter, cubicmeter.As(VolumeUnit.UsOunce), UsOuncesTolerance);
            AssertEx.EqualTolerance(UsPintsInOneCubicMeter, cubicmeter.As(VolumeUnit.UsPint), UsPintsTolerance);
            AssertEx.EqualTolerance(UsQuartsInOneCubicMeter, cubicmeter.As(VolumeUnit.UsQuart), UsQuartsTolerance);
            AssertEx.EqualTolerance(UsTablespoonsInOneCubicMeter, cubicmeter.As(VolumeUnit.UsTablespoon), UsTablespoonsTolerance);
            AssertEx.EqualTolerance(UsTeaspoonsInOneCubicMeter, cubicmeter.As(VolumeUnit.UsTeaspoon), UsTeaspoonsTolerance);
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var cubicmeter = Volume.FromCubicMeters(1);

            AssertEx.EqualTolerance(CubicMetersInOneCubicMeter, cubicmeter.As(UnitSystem.SI), CubicMetersTolerance);
            AssertEx.EqualTolerance(CubicCentimetersInOneCubicMeter, cubicmeter.As(UnitSystem.CGS), CubicCentimetersTolerance);
            AssertEx.EqualTolerance(CubicFeetInOneCubicMeter, cubicmeter.As(UnitSystem.EE), CubicFeetTolerance);

            Assert.Throws<ArgumentException>(() => cubicmeter.As(UnitSystem.BI));
            Assert.Throws<ArgumentException>(() => cubicmeter.As(UnitSystem.USC));
            Assert.Throws<ArgumentException>(() => cubicmeter.As(UnitSystem.FPS));
            Assert.Throws<ArgumentException>(() => cubicmeter.As(UnitSystem.Astronomical));
        }

        [Fact]
        public void As_WithNullUnitSystem_ThrowsArgumentNullException()
        {
            var cubicmeter = Volume.FromCubicMeters(1);
 
            Assert.Throws<ArgumentNullException>(() => cubicmeter.As(null));
        }

        [Fact]
        public void ToUnit()
        {
            var cubicmeter = Volume.FromCubicMeters(1);

            var acrefootQuantity = cubicmeter.ToUnit(VolumeUnit.AcreFoot);
            AssertEx.EqualTolerance(AcreFeetInOneCubicMeter, (double)acrefootQuantity.Value, AcreFeetTolerance);
            Assert.Equal(VolumeUnit.AcreFoot, acrefootQuantity.Unit);

            var autablespoonQuantity = cubicmeter.ToUnit(VolumeUnit.AuTablespoon);
            AssertEx.EqualTolerance(AuTablespoonsInOneCubicMeter, (double)autablespoonQuantity.Value, AuTablespoonsTolerance);
            Assert.Equal(VolumeUnit.AuTablespoon, autablespoonQuantity.Unit);

            var centiliterQuantity = cubicmeter.ToUnit(VolumeUnit.Centiliter);
            AssertEx.EqualTolerance(CentilitersInOneCubicMeter, (double)centiliterQuantity.Value, CentilitersTolerance);
            Assert.Equal(VolumeUnit.Centiliter, centiliterQuantity.Unit);

            var cubiccentimeterQuantity = cubicmeter.ToUnit(VolumeUnit.CubicCentimeter);
            AssertEx.EqualTolerance(CubicCentimetersInOneCubicMeter, (double)cubiccentimeterQuantity.Value, CubicCentimetersTolerance);
            Assert.Equal(VolumeUnit.CubicCentimeter, cubiccentimeterQuantity.Unit);

            var cubicdecimeterQuantity = cubicmeter.ToUnit(VolumeUnit.CubicDecimeter);
            AssertEx.EqualTolerance(CubicDecimetersInOneCubicMeter, (double)cubicdecimeterQuantity.Value, CubicDecimetersTolerance);
            Assert.Equal(VolumeUnit.CubicDecimeter, cubicdecimeterQuantity.Unit);

            var cubicfootQuantity = cubicmeter.ToUnit(VolumeUnit.CubicFoot);
            AssertEx.EqualTolerance(CubicFeetInOneCubicMeter, (double)cubicfootQuantity.Value, CubicFeetTolerance);
            Assert.Equal(VolumeUnit.CubicFoot, cubicfootQuantity.Unit);

            var cubichectometerQuantity = cubicmeter.ToUnit(VolumeUnit.CubicHectometer);
            AssertEx.EqualTolerance(CubicHectometersInOneCubicMeter, (double)cubichectometerQuantity.Value, CubicHectometersTolerance);
            Assert.Equal(VolumeUnit.CubicHectometer, cubichectometerQuantity.Unit);

            var cubicinchQuantity = cubicmeter.ToUnit(VolumeUnit.CubicInch);
            AssertEx.EqualTolerance(CubicInchesInOneCubicMeter, (double)cubicinchQuantity.Value, CubicInchesTolerance);
            Assert.Equal(VolumeUnit.CubicInch, cubicinchQuantity.Unit);

            var cubickilometerQuantity = cubicmeter.ToUnit(VolumeUnit.CubicKilometer);
            AssertEx.EqualTolerance(CubicKilometersInOneCubicMeter, (double)cubickilometerQuantity.Value, CubicKilometersTolerance);
            Assert.Equal(VolumeUnit.CubicKilometer, cubickilometerQuantity.Unit);

            var cubicmeterQuantity = cubicmeter.ToUnit(VolumeUnit.CubicMeter);
            AssertEx.EqualTolerance(CubicMetersInOneCubicMeter, (double)cubicmeterQuantity.Value, CubicMetersTolerance);
            Assert.Equal(VolumeUnit.CubicMeter, cubicmeterQuantity.Unit);

            var cubicmicrometerQuantity = cubicmeter.ToUnit(VolumeUnit.CubicMicrometer);
            AssertEx.EqualTolerance(CubicMicrometersInOneCubicMeter, (double)cubicmicrometerQuantity.Value, CubicMicrometersTolerance);
            Assert.Equal(VolumeUnit.CubicMicrometer, cubicmicrometerQuantity.Unit);

            var cubicmileQuantity = cubicmeter.ToUnit(VolumeUnit.CubicMile);
            AssertEx.EqualTolerance(CubicMilesInOneCubicMeter, (double)cubicmileQuantity.Value, CubicMilesTolerance);
            Assert.Equal(VolumeUnit.CubicMile, cubicmileQuantity.Unit);

            var cubicmillimeterQuantity = cubicmeter.ToUnit(VolumeUnit.CubicMillimeter);
            AssertEx.EqualTolerance(CubicMillimetersInOneCubicMeter, (double)cubicmillimeterQuantity.Value, CubicMillimetersTolerance);
            Assert.Equal(VolumeUnit.CubicMillimeter, cubicmillimeterQuantity.Unit);

            var cubicyardQuantity = cubicmeter.ToUnit(VolumeUnit.CubicYard);
            AssertEx.EqualTolerance(CubicYardsInOneCubicMeter, (double)cubicyardQuantity.Value, CubicYardsTolerance);
            Assert.Equal(VolumeUnit.CubicYard, cubicyardQuantity.Unit);

            var deciliterQuantity = cubicmeter.ToUnit(VolumeUnit.Deciliter);
            AssertEx.EqualTolerance(DecilitersInOneCubicMeter, (double)deciliterQuantity.Value, DecilitersTolerance);
            Assert.Equal(VolumeUnit.Deciliter, deciliterQuantity.Unit);

            var hectocubicfootQuantity = cubicmeter.ToUnit(VolumeUnit.HectocubicFoot);
            AssertEx.EqualTolerance(HectocubicFeetInOneCubicMeter, (double)hectocubicfootQuantity.Value, HectocubicFeetTolerance);
            Assert.Equal(VolumeUnit.HectocubicFoot, hectocubicfootQuantity.Unit);

            var hectocubicmeterQuantity = cubicmeter.ToUnit(VolumeUnit.HectocubicMeter);
            AssertEx.EqualTolerance(HectocubicMetersInOneCubicMeter, (double)hectocubicmeterQuantity.Value, HectocubicMetersTolerance);
            Assert.Equal(VolumeUnit.HectocubicMeter, hectocubicmeterQuantity.Unit);

            var hectoliterQuantity = cubicmeter.ToUnit(VolumeUnit.Hectoliter);
            AssertEx.EqualTolerance(HectolitersInOneCubicMeter, (double)hectoliterQuantity.Value, HectolitersTolerance);
            Assert.Equal(VolumeUnit.Hectoliter, hectoliterQuantity.Unit);

            var imperialbeerbarrelQuantity = cubicmeter.ToUnit(VolumeUnit.ImperialBeerBarrel);
            AssertEx.EqualTolerance(ImperialBeerBarrelsInOneCubicMeter, (double)imperialbeerbarrelQuantity.Value, ImperialBeerBarrelsTolerance);
            Assert.Equal(VolumeUnit.ImperialBeerBarrel, imperialbeerbarrelQuantity.Unit);

            var imperialgallonQuantity = cubicmeter.ToUnit(VolumeUnit.ImperialGallon);
            AssertEx.EqualTolerance(ImperialGallonsInOneCubicMeter, (double)imperialgallonQuantity.Value, ImperialGallonsTolerance);
            Assert.Equal(VolumeUnit.ImperialGallon, imperialgallonQuantity.Unit);

            var imperialounceQuantity = cubicmeter.ToUnit(VolumeUnit.ImperialOunce);
            AssertEx.EqualTolerance(ImperialOuncesInOneCubicMeter, (double)imperialounceQuantity.Value, ImperialOuncesTolerance);
            Assert.Equal(VolumeUnit.ImperialOunce, imperialounceQuantity.Unit);

            var imperialpintQuantity = cubicmeter.ToUnit(VolumeUnit.ImperialPint);
            AssertEx.EqualTolerance(ImperialPintsInOneCubicMeter, (double)imperialpintQuantity.Value, ImperialPintsTolerance);
            Assert.Equal(VolumeUnit.ImperialPint, imperialpintQuantity.Unit);

            var kilocubicfootQuantity = cubicmeter.ToUnit(VolumeUnit.KilocubicFoot);
            AssertEx.EqualTolerance(KilocubicFeetInOneCubicMeter, (double)kilocubicfootQuantity.Value, KilocubicFeetTolerance);
            Assert.Equal(VolumeUnit.KilocubicFoot, kilocubicfootQuantity.Unit);

            var kilocubicmeterQuantity = cubicmeter.ToUnit(VolumeUnit.KilocubicMeter);
            AssertEx.EqualTolerance(KilocubicMetersInOneCubicMeter, (double)kilocubicmeterQuantity.Value, KilocubicMetersTolerance);
            Assert.Equal(VolumeUnit.KilocubicMeter, kilocubicmeterQuantity.Unit);

            var kiloimperialgallonQuantity = cubicmeter.ToUnit(VolumeUnit.KiloimperialGallon);
            AssertEx.EqualTolerance(KiloimperialGallonsInOneCubicMeter, (double)kiloimperialgallonQuantity.Value, KiloimperialGallonsTolerance);
            Assert.Equal(VolumeUnit.KiloimperialGallon, kiloimperialgallonQuantity.Unit);

            var kiloliterQuantity = cubicmeter.ToUnit(VolumeUnit.Kiloliter);
            AssertEx.EqualTolerance(KilolitersInOneCubicMeter, (double)kiloliterQuantity.Value, KilolitersTolerance);
            Assert.Equal(VolumeUnit.Kiloliter, kiloliterQuantity.Unit);

            var kilousgallonQuantity = cubicmeter.ToUnit(VolumeUnit.KilousGallon);
            AssertEx.EqualTolerance(KilousGallonsInOneCubicMeter, (double)kilousgallonQuantity.Value, KilousGallonsTolerance);
            Assert.Equal(VolumeUnit.KilousGallon, kilousgallonQuantity.Unit);

            var literQuantity = cubicmeter.ToUnit(VolumeUnit.Liter);
            AssertEx.EqualTolerance(LitersInOneCubicMeter, (double)literQuantity.Value, LitersTolerance);
            Assert.Equal(VolumeUnit.Liter, literQuantity.Unit);

            var megacubicfootQuantity = cubicmeter.ToUnit(VolumeUnit.MegacubicFoot);
            AssertEx.EqualTolerance(MegacubicFeetInOneCubicMeter, (double)megacubicfootQuantity.Value, MegacubicFeetTolerance);
            Assert.Equal(VolumeUnit.MegacubicFoot, megacubicfootQuantity.Unit);

            var megaimperialgallonQuantity = cubicmeter.ToUnit(VolumeUnit.MegaimperialGallon);
            AssertEx.EqualTolerance(MegaimperialGallonsInOneCubicMeter, (double)megaimperialgallonQuantity.Value, MegaimperialGallonsTolerance);
            Assert.Equal(VolumeUnit.MegaimperialGallon, megaimperialgallonQuantity.Unit);

            var megaliterQuantity = cubicmeter.ToUnit(VolumeUnit.Megaliter);
            AssertEx.EqualTolerance(MegalitersInOneCubicMeter, (double)megaliterQuantity.Value, MegalitersTolerance);
            Assert.Equal(VolumeUnit.Megaliter, megaliterQuantity.Unit);

            var megausgallonQuantity = cubicmeter.ToUnit(VolumeUnit.MegausGallon);
            AssertEx.EqualTolerance(MegausGallonsInOneCubicMeter, (double)megausgallonQuantity.Value, MegausGallonsTolerance);
            Assert.Equal(VolumeUnit.MegausGallon, megausgallonQuantity.Unit);

            var metriccupQuantity = cubicmeter.ToUnit(VolumeUnit.MetricCup);
            AssertEx.EqualTolerance(MetricCupsInOneCubicMeter, (double)metriccupQuantity.Value, MetricCupsTolerance);
            Assert.Equal(VolumeUnit.MetricCup, metriccupQuantity.Unit);

            var metricteaspoonQuantity = cubicmeter.ToUnit(VolumeUnit.MetricTeaspoon);
            AssertEx.EqualTolerance(MetricTeaspoonsInOneCubicMeter, (double)metricteaspoonQuantity.Value, MetricTeaspoonsTolerance);
            Assert.Equal(VolumeUnit.MetricTeaspoon, metricteaspoonQuantity.Unit);

            var microliterQuantity = cubicmeter.ToUnit(VolumeUnit.Microliter);
            AssertEx.EqualTolerance(MicrolitersInOneCubicMeter, (double)microliterQuantity.Value, MicrolitersTolerance);
            Assert.Equal(VolumeUnit.Microliter, microliterQuantity.Unit);

            var milliliterQuantity = cubicmeter.ToUnit(VolumeUnit.Milliliter);
            AssertEx.EqualTolerance(MillilitersInOneCubicMeter, (double)milliliterQuantity.Value, MillilitersTolerance);
            Assert.Equal(VolumeUnit.Milliliter, milliliterQuantity.Unit);

            var oilbarrelQuantity = cubicmeter.ToUnit(VolumeUnit.OilBarrel);
            AssertEx.EqualTolerance(OilBarrelsInOneCubicMeter, (double)oilbarrelQuantity.Value, OilBarrelsTolerance);
            Assert.Equal(VolumeUnit.OilBarrel, oilbarrelQuantity.Unit);

            var uktablespoonQuantity = cubicmeter.ToUnit(VolumeUnit.UkTablespoon);
            AssertEx.EqualTolerance(UkTablespoonsInOneCubicMeter, (double)uktablespoonQuantity.Value, UkTablespoonsTolerance);
            Assert.Equal(VolumeUnit.UkTablespoon, uktablespoonQuantity.Unit);

            var usbeerbarrelQuantity = cubicmeter.ToUnit(VolumeUnit.UsBeerBarrel);
            AssertEx.EqualTolerance(UsBeerBarrelsInOneCubicMeter, (double)usbeerbarrelQuantity.Value, UsBeerBarrelsTolerance);
            Assert.Equal(VolumeUnit.UsBeerBarrel, usbeerbarrelQuantity.Unit);

            var uscustomarycupQuantity = cubicmeter.ToUnit(VolumeUnit.UsCustomaryCup);
            AssertEx.EqualTolerance(UsCustomaryCupsInOneCubicMeter, (double)uscustomarycupQuantity.Value, UsCustomaryCupsTolerance);
            Assert.Equal(VolumeUnit.UsCustomaryCup, uscustomarycupQuantity.Unit);

            var usgallonQuantity = cubicmeter.ToUnit(VolumeUnit.UsGallon);
            AssertEx.EqualTolerance(UsGallonsInOneCubicMeter, (double)usgallonQuantity.Value, UsGallonsTolerance);
            Assert.Equal(VolumeUnit.UsGallon, usgallonQuantity.Unit);

            var uslegalcupQuantity = cubicmeter.ToUnit(VolumeUnit.UsLegalCup);
            AssertEx.EqualTolerance(UsLegalCupsInOneCubicMeter, (double)uslegalcupQuantity.Value, UsLegalCupsTolerance);
            Assert.Equal(VolumeUnit.UsLegalCup, uslegalcupQuantity.Unit);

            var usounceQuantity = cubicmeter.ToUnit(VolumeUnit.UsOunce);
            AssertEx.EqualTolerance(UsOuncesInOneCubicMeter, (double)usounceQuantity.Value, UsOuncesTolerance);
            Assert.Equal(VolumeUnit.UsOunce, usounceQuantity.Unit);

            var uspintQuantity = cubicmeter.ToUnit(VolumeUnit.UsPint);
            AssertEx.EqualTolerance(UsPintsInOneCubicMeter, (double)uspintQuantity.Value, UsPintsTolerance);
            Assert.Equal(VolumeUnit.UsPint, uspintQuantity.Unit);

            var usquartQuantity = cubicmeter.ToUnit(VolumeUnit.UsQuart);
            AssertEx.EqualTolerance(UsQuartsInOneCubicMeter, (double)usquartQuantity.Value, UsQuartsTolerance);
            Assert.Equal(VolumeUnit.UsQuart, usquartQuantity.Unit);

            var ustablespoonQuantity = cubicmeter.ToUnit(VolumeUnit.UsTablespoon);
            AssertEx.EqualTolerance(UsTablespoonsInOneCubicMeter, (double)ustablespoonQuantity.Value, UsTablespoonsTolerance);
            Assert.Equal(VolumeUnit.UsTablespoon, ustablespoonQuantity.Unit);

            var usteaspoonQuantity = cubicmeter.ToUnit(VolumeUnit.UsTeaspoon);
            AssertEx.EqualTolerance(UsTeaspoonsInOneCubicMeter, (double)usteaspoonQuantity.Value, UsTeaspoonsTolerance);
            Assert.Equal(VolumeUnit.UsTeaspoon, usteaspoonQuantity.Unit);
        }

        [Fact]
        public void To_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var cubicmeter = Volume.FromCubicMeters(1);

            var siQuantity = cubicmeter.ToUnit(UnitSystem.SI);
            AssertEx.EqualTolerance(CubicMetersInOneCubicMeter, (double)siQuantity.Value, CubicMetersTolerance);
            Assert.Equal(VolumeUnit.CubicMeter, siQuantity.Unit);

            var cgsQuantity = cubicmeter.ToUnit(UnitSystem.CGS);
            AssertEx.EqualTolerance(CubicCentimetersInOneCubicMeter, (double)cgsQuantity.Value, CubicCentimetersTolerance);
            Assert.Equal(VolumeUnit.CubicCentimeter, cgsQuantity.Unit);

            var eeQuantity = cubicmeter.ToUnit(UnitSystem.EE);
            AssertEx.EqualTolerance(CubicFeetInOneCubicMeter, (double)eeQuantity.Value, CubicFeetTolerance);
            Assert.Equal(VolumeUnit.CubicFoot, eeQuantity.Unit);

            Assert.Throws<ArgumentException>(() => cubicmeter.ToUnit(UnitSystem.BI));
            Assert.Throws<ArgumentException>(() => cubicmeter.ToUnit(UnitSystem.USC));
            Assert.Throws<ArgumentException>(() => cubicmeter.ToUnit(UnitSystem.FPS));
            Assert.Throws<ArgumentException>(() => cubicmeter.ToUnit(UnitSystem.Astronomical));
        }

        [Fact]
        public void ToUnit_WithNullUnitSystem_ThrowsNullException()
        {
            var cubicmeter = Volume.FromCubicMeters(1);
 
            Assert.Throws<ArgumentNullException>(() => cubicmeter.ToUnit(null));
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            Volume cubicmeter = Volume.FromCubicMeters(1);
            AssertEx.EqualTolerance(1, Volume.FromAcreFeet(cubicmeter.AcreFeet).CubicMeters, AcreFeetTolerance);
            AssertEx.EqualTolerance(1, Volume.FromAuTablespoons(cubicmeter.AuTablespoons).CubicMeters, AuTablespoonsTolerance);
            AssertEx.EqualTolerance(1, Volume.FromCentiliters(cubicmeter.Centiliters).CubicMeters, CentilitersTolerance);
            AssertEx.EqualTolerance(1, Volume.FromCubicCentimeters(cubicmeter.CubicCentimeters).CubicMeters, CubicCentimetersTolerance);
            AssertEx.EqualTolerance(1, Volume.FromCubicDecimeters(cubicmeter.CubicDecimeters).CubicMeters, CubicDecimetersTolerance);
            AssertEx.EqualTolerance(1, Volume.FromCubicFeet(cubicmeter.CubicFeet).CubicMeters, CubicFeetTolerance);
            AssertEx.EqualTolerance(1, Volume.FromCubicHectometers(cubicmeter.CubicHectometers).CubicMeters, CubicHectometersTolerance);
            AssertEx.EqualTolerance(1, Volume.FromCubicInches(cubicmeter.CubicInches).CubicMeters, CubicInchesTolerance);
            AssertEx.EqualTolerance(1, Volume.FromCubicKilometers(cubicmeter.CubicKilometers).CubicMeters, CubicKilometersTolerance);
            AssertEx.EqualTolerance(1, Volume.FromCubicMeters(cubicmeter.CubicMeters).CubicMeters, CubicMetersTolerance);
            AssertEx.EqualTolerance(1, Volume.FromCubicMicrometers(cubicmeter.CubicMicrometers).CubicMeters, CubicMicrometersTolerance);
            AssertEx.EqualTolerance(1, Volume.FromCubicMiles(cubicmeter.CubicMiles).CubicMeters, CubicMilesTolerance);
            AssertEx.EqualTolerance(1, Volume.FromCubicMillimeters(cubicmeter.CubicMillimeters).CubicMeters, CubicMillimetersTolerance);
            AssertEx.EqualTolerance(1, Volume.FromCubicYards(cubicmeter.CubicYards).CubicMeters, CubicYardsTolerance);
            AssertEx.EqualTolerance(1, Volume.FromDeciliters(cubicmeter.Deciliters).CubicMeters, DecilitersTolerance);
            AssertEx.EqualTolerance(1, Volume.FromHectocubicFeet(cubicmeter.HectocubicFeet).CubicMeters, HectocubicFeetTolerance);
            AssertEx.EqualTolerance(1, Volume.FromHectocubicMeters(cubicmeter.HectocubicMeters).CubicMeters, HectocubicMetersTolerance);
            AssertEx.EqualTolerance(1, Volume.FromHectoliters(cubicmeter.Hectoliters).CubicMeters, HectolitersTolerance);
            AssertEx.EqualTolerance(1, Volume.FromImperialBeerBarrels(cubicmeter.ImperialBeerBarrels).CubicMeters, ImperialBeerBarrelsTolerance);
            AssertEx.EqualTolerance(1, Volume.FromImperialGallons(cubicmeter.ImperialGallons).CubicMeters, ImperialGallonsTolerance);
            AssertEx.EqualTolerance(1, Volume.FromImperialOunces(cubicmeter.ImperialOunces).CubicMeters, ImperialOuncesTolerance);
            AssertEx.EqualTolerance(1, Volume.FromImperialPints(cubicmeter.ImperialPints).CubicMeters, ImperialPintsTolerance);
            AssertEx.EqualTolerance(1, Volume.FromKilocubicFeet(cubicmeter.KilocubicFeet).CubicMeters, KilocubicFeetTolerance);
            AssertEx.EqualTolerance(1, Volume.FromKilocubicMeters(cubicmeter.KilocubicMeters).CubicMeters, KilocubicMetersTolerance);
            AssertEx.EqualTolerance(1, Volume.FromKiloimperialGallons(cubicmeter.KiloimperialGallons).CubicMeters, KiloimperialGallonsTolerance);
            AssertEx.EqualTolerance(1, Volume.FromKiloliters(cubicmeter.Kiloliters).CubicMeters, KilolitersTolerance);
            AssertEx.EqualTolerance(1, Volume.FromKilousGallons(cubicmeter.KilousGallons).CubicMeters, KilousGallonsTolerance);
            AssertEx.EqualTolerance(1, Volume.FromLiters(cubicmeter.Liters).CubicMeters, LitersTolerance);
            AssertEx.EqualTolerance(1, Volume.FromMegacubicFeet(cubicmeter.MegacubicFeet).CubicMeters, MegacubicFeetTolerance);
            AssertEx.EqualTolerance(1, Volume.FromMegaimperialGallons(cubicmeter.MegaimperialGallons).CubicMeters, MegaimperialGallonsTolerance);
            AssertEx.EqualTolerance(1, Volume.FromMegaliters(cubicmeter.Megaliters).CubicMeters, MegalitersTolerance);
            AssertEx.EqualTolerance(1, Volume.FromMegausGallons(cubicmeter.MegausGallons).CubicMeters, MegausGallonsTolerance);
            AssertEx.EqualTolerance(1, Volume.FromMetricCups(cubicmeter.MetricCups).CubicMeters, MetricCupsTolerance);
            AssertEx.EqualTolerance(1, Volume.FromMetricTeaspoons(cubicmeter.MetricTeaspoons).CubicMeters, MetricTeaspoonsTolerance);
            AssertEx.EqualTolerance(1, Volume.FromMicroliters(cubicmeter.Microliters).CubicMeters, MicrolitersTolerance);
            AssertEx.EqualTolerance(1, Volume.FromMilliliters(cubicmeter.Milliliters).CubicMeters, MillilitersTolerance);
            AssertEx.EqualTolerance(1, Volume.FromOilBarrels(cubicmeter.OilBarrels).CubicMeters, OilBarrelsTolerance);
            AssertEx.EqualTolerance(1, Volume.FromUkTablespoons(cubicmeter.UkTablespoons).CubicMeters, UkTablespoonsTolerance);
            AssertEx.EqualTolerance(1, Volume.FromUsBeerBarrels(cubicmeter.UsBeerBarrels).CubicMeters, UsBeerBarrelsTolerance);
            AssertEx.EqualTolerance(1, Volume.FromUsCustomaryCups(cubicmeter.UsCustomaryCups).CubicMeters, UsCustomaryCupsTolerance);
            AssertEx.EqualTolerance(1, Volume.FromUsGallons(cubicmeter.UsGallons).CubicMeters, UsGallonsTolerance);
            AssertEx.EqualTolerance(1, Volume.FromUsLegalCups(cubicmeter.UsLegalCups).CubicMeters, UsLegalCupsTolerance);
            AssertEx.EqualTolerance(1, Volume.FromUsOunces(cubicmeter.UsOunces).CubicMeters, UsOuncesTolerance);
            AssertEx.EqualTolerance(1, Volume.FromUsPints(cubicmeter.UsPints).CubicMeters, UsPintsTolerance);
            AssertEx.EqualTolerance(1, Volume.FromUsQuarts(cubicmeter.UsQuarts).CubicMeters, UsQuartsTolerance);
            AssertEx.EqualTolerance(1, Volume.FromUsTablespoons(cubicmeter.UsTablespoons).CubicMeters, UsTablespoonsTolerance);
            AssertEx.EqualTolerance(1, Volume.FromUsTeaspoons(cubicmeter.UsTeaspoons).CubicMeters, UsTeaspoonsTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            Volume v = Volume.FromCubicMeters(1);
            AssertEx.EqualTolerance(-1, -v.CubicMeters, CubicMetersTolerance);
            AssertEx.EqualTolerance(2, (Volume.FromCubicMeters(3)-v).CubicMeters, CubicMetersTolerance);
            AssertEx.EqualTolerance(2, (v + v).CubicMeters, CubicMetersTolerance);
            AssertEx.EqualTolerance(10, (v*10).CubicMeters, CubicMetersTolerance);
            AssertEx.EqualTolerance(10, (10*v).CubicMeters, CubicMetersTolerance);
            AssertEx.EqualTolerance(2, (Volume.FromCubicMeters(10)/5).CubicMeters, CubicMetersTolerance);
            AssertEx.EqualTolerance(2, Volume.FromCubicMeters(10)/Volume.FromCubicMeters(5), CubicMetersTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            Volume oneCubicMeter = Volume.FromCubicMeters(1);
            Volume twoCubicMeters = Volume.FromCubicMeters(2);

            Assert.True(oneCubicMeter < twoCubicMeters);
            Assert.True(oneCubicMeter <= twoCubicMeters);
            Assert.True(twoCubicMeters > oneCubicMeter);
            Assert.True(twoCubicMeters >= oneCubicMeter);

            Assert.False(oneCubicMeter > twoCubicMeters);
            Assert.False(oneCubicMeter >= twoCubicMeters);
            Assert.False(twoCubicMeters < oneCubicMeter);
            Assert.False(twoCubicMeters <= oneCubicMeter);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            Volume cubicmeter = Volume.FromCubicMeters(1);
            Assert.Equal(0, cubicmeter.CompareTo(cubicmeter));
            Assert.True(cubicmeter.CompareTo(Volume.Zero) > 0);
            Assert.True(Volume.Zero.CompareTo(cubicmeter) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            Volume cubicmeter = Volume.FromCubicMeters(1);
            Assert.Throws<ArgumentException>(() => cubicmeter.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            Volume cubicmeter = Volume.FromCubicMeters(1);
            Assert.Throws<ArgumentNullException>(() => cubicmeter.CompareTo(null));
        }

        [Fact]
        public void EqualityOperators()
        {
            var a = Volume.FromCubicMeters(1);
            var b = Volume.FromCubicMeters(2);

 // ReSharper disable EqualExpressionComparison

            Assert.True(a == a);
            Assert.False(a != a);

            Assert.True(a != b);
            Assert.False(a == b);

            Assert.False(a == null);
            Assert.False(null == a);

// ReSharper restore EqualExpressionComparison
        }

        [Fact]
        public void EqualsIsImplemented()
        {
            var a = Volume.FromCubicMeters(1);
            var b = Volume.FromCubicMeters(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
            Assert.False(a.Equals(null));
        }

        [Fact]
        public void EqualsRelativeToleranceIsImplemented()
        {
            var v = Volume.FromCubicMeters(1);
            Assert.True(v.Equals(Volume.FromCubicMeters(1), CubicMetersTolerance, ComparisonType.Relative));
            Assert.False(v.Equals(Volume.Zero, CubicMetersTolerance, ComparisonType.Relative));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            Volume cubicmeter = Volume.FromCubicMeters(1);
            Assert.False(cubicmeter.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            Volume cubicmeter = Volume.FromCubicMeters(1);
            Assert.False(cubicmeter.Equals(null));
        }

        [Fact]
        public void UnitsDoesNotContainUndefined()
        {
            Assert.DoesNotContain(VolumeUnit.Undefined, Volume.Units);
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues(typeof(VolumeUnit)).Cast<VolumeUnit>();
            foreach(var unit in units)
            {
                if(unit == VolumeUnit.Undefined)
                    continue;

                var defaultAbbreviation = UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(Volume.BaseDimensions is null);
        }
    }
}
