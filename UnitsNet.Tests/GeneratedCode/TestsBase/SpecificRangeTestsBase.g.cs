//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of SpecificRange.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class SpecificRangeTestsBase : QuantityTestsBase
    {
        protected abstract double CentimetersPerKilogramForceInOneMeterPerKilogramForce { get; }
        protected abstract double CentimetersPerNewtonInOneMeterPerKilogramForce { get; }
        protected abstract double DecametersPerKilogramForceInOneMeterPerKilogramForce { get; }
        protected abstract double DecametersPerNewtonInOneMeterPerKilogramForce { get; }
        protected abstract double DecimetersPerKilogramForceInOneMeterPerKilogramForce { get; }
        protected abstract double DecimetersPerNewtonInOneMeterPerKilogramForce { get; }
        protected abstract double KilometersPerKilogramForceInOneMeterPerKilogramForce { get; }
        protected abstract double KilometersPerNewtonInOneMeterPerKilogramForce { get; }
        protected abstract double MegametersPerKilogramForceInOneMeterPerKilogramForce { get; }
        protected abstract double MegametersPerNewtonInOneMeterPerKilogramForce { get; }
        protected abstract double MetersPerKilogramForceInOneMeterPerKilogramForce { get; }
        protected abstract double MetersPerNewtonInOneMeterPerKilogramForce { get; }
        protected abstract double MicrometersPerKilogramForceInOneMeterPerKilogramForce { get; }
        protected abstract double MicrometersPerNewtonInOneMeterPerKilogramForce { get; }
        protected abstract double MillimetersPerKilogramForceInOneMeterPerKilogramForce { get; }
        protected abstract double MillimetersPerNewtonInOneMeterPerKilogramForce { get; }
        protected abstract double NanometersPerKilogramForceInOneMeterPerKilogramForce { get; }
        protected abstract double NanometersPerNewtonInOneMeterPerKilogramForce { get; }
        protected abstract double NauticalMilesPerPoundForceInOneMeterPerKilogramForce { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double CentimetersPerKilogramForceTolerance { get { return 1e-5; } }
        protected virtual double CentimetersPerNewtonTolerance { get { return 1e-5; } }
        protected virtual double DecametersPerKilogramForceTolerance { get { return 1e-5; } }
        protected virtual double DecametersPerNewtonTolerance { get { return 1e-5; } }
        protected virtual double DecimetersPerKilogramForceTolerance { get { return 1e-5; } }
        protected virtual double DecimetersPerNewtonTolerance { get { return 1e-5; } }
        protected virtual double KilometersPerKilogramForceTolerance { get { return 1e-5; } }
        protected virtual double KilometersPerNewtonTolerance { get { return 1e-5; } }
        protected virtual double MegametersPerKilogramForceTolerance { get { return 1e-5; } }
        protected virtual double MegametersPerNewtonTolerance { get { return 1e-5; } }
        protected virtual double MetersPerKilogramForceTolerance { get { return 1e-5; } }
        protected virtual double MetersPerNewtonTolerance { get { return 1e-5; } }
        protected virtual double MicrometersPerKilogramForceTolerance { get { return 1e-5; } }
        protected virtual double MicrometersPerNewtonTolerance { get { return 1e-5; } }
        protected virtual double MillimetersPerKilogramForceTolerance { get { return 1e-5; } }
        protected virtual double MillimetersPerNewtonTolerance { get { return 1e-5; } }
        protected virtual double NanometersPerKilogramForceTolerance { get { return 1e-5; } }
        protected virtual double NanometersPerNewtonTolerance { get { return 1e-5; } }
        protected virtual double NauticalMilesPerPoundForceTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        [Fact]
        public void Ctor_WithUndefinedUnit_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new SpecificRange((double)0.0, SpecificRangeUnit.Undefined));
        }

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new SpecificRange();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(SpecificRangeUnit.MeterPerKilogramForce, quantity.Unit);
        }


        [Fact]
        public void Ctor_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new SpecificRange(double.PositiveInfinity, SpecificRangeUnit.MeterPerKilogramForce));
            Assert.Throws<ArgumentException>(() => new SpecificRange(double.NegativeInfinity, SpecificRangeUnit.MeterPerKilogramForce));
        }

        [Fact]
        public void Ctor_WithNaNValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new SpecificRange(double.NaN, SpecificRangeUnit.MeterPerKilogramForce));
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new SpecificRange(value: 1, unitSystem: null));
        }

        [Fact]
        public void Ctor_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            Func<object> TestCode = () => new SpecificRange(value: 1, unitSystem: UnitSystem.SI);
            if (SupportsSIUnitSystem)
            {
                var quantity = (SpecificRange) TestCode();
                Assert.Equal(1, quantity.Value);
            }
            else
            {
                Assert.Throws<ArgumentException>(TestCode);
            }
        }

        [Fact]
        public void SpecificRange_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            var quantity = new SpecificRange(1, SpecificRangeUnit.MeterPerKilogramForce);

            QuantityInfo<SpecificRangeUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal(SpecificRange.Zero, quantityInfo.Zero);
            Assert.Equal("SpecificRange", quantityInfo.Name);
            Assert.Equal(QuantityType.SpecificRange, quantityInfo.QuantityType);

            var units = EnumUtils.GetEnumValues<SpecificRangeUnit>().Except(new[] {SpecificRangeUnit.Undefined}).ToArray();
            var unitNames = units.Select(x => x.ToString());

            // Obsolete members
            Assert.Equal(units, quantityInfo.Units);
            Assert.Equal(unitNames, quantityInfo.UnitNames);
        }

        [Fact]
        public void MeterPerKilogramForceToSpecificRangeUnits()
        {
            SpecificRange meterperkilogramforce = SpecificRange.FromMetersPerKilogramForce(1);
            AssertEx.EqualTolerance(CentimetersPerKilogramForceInOneMeterPerKilogramForce, meterperkilogramforce.CentimetersPerKilogramForce, CentimetersPerKilogramForceTolerance);
            AssertEx.EqualTolerance(CentimetersPerNewtonInOneMeterPerKilogramForce, meterperkilogramforce.CentimetersPerNewton, CentimetersPerNewtonTolerance);
            AssertEx.EqualTolerance(DecametersPerKilogramForceInOneMeterPerKilogramForce, meterperkilogramforce.DecametersPerKilogramForce, DecametersPerKilogramForceTolerance);
            AssertEx.EqualTolerance(DecametersPerNewtonInOneMeterPerKilogramForce, meterperkilogramforce.DecametersPerNewton, DecametersPerNewtonTolerance);
            AssertEx.EqualTolerance(DecimetersPerKilogramForceInOneMeterPerKilogramForce, meterperkilogramforce.DecimetersPerKilogramForce, DecimetersPerKilogramForceTolerance);
            AssertEx.EqualTolerance(DecimetersPerNewtonInOneMeterPerKilogramForce, meterperkilogramforce.DecimetersPerNewton, DecimetersPerNewtonTolerance);
            AssertEx.EqualTolerance(KilometersPerKilogramForceInOneMeterPerKilogramForce, meterperkilogramforce.KilometersPerKilogramForce, KilometersPerKilogramForceTolerance);
            AssertEx.EqualTolerance(KilometersPerNewtonInOneMeterPerKilogramForce, meterperkilogramforce.KilometersPerNewton, KilometersPerNewtonTolerance);
            AssertEx.EqualTolerance(MegametersPerKilogramForceInOneMeterPerKilogramForce, meterperkilogramforce.MegametersPerKilogramForce, MegametersPerKilogramForceTolerance);
            AssertEx.EqualTolerance(MegametersPerNewtonInOneMeterPerKilogramForce, meterperkilogramforce.MegametersPerNewton, MegametersPerNewtonTolerance);
            AssertEx.EqualTolerance(MetersPerKilogramForceInOneMeterPerKilogramForce, meterperkilogramforce.MetersPerKilogramForce, MetersPerKilogramForceTolerance);
            AssertEx.EqualTolerance(MetersPerNewtonInOneMeterPerKilogramForce, meterperkilogramforce.MetersPerNewton, MetersPerNewtonTolerance);
            AssertEx.EqualTolerance(MicrometersPerKilogramForceInOneMeterPerKilogramForce, meterperkilogramforce.MicrometersPerKilogramForce, MicrometersPerKilogramForceTolerance);
            AssertEx.EqualTolerance(MicrometersPerNewtonInOneMeterPerKilogramForce, meterperkilogramforce.MicrometersPerNewton, MicrometersPerNewtonTolerance);
            AssertEx.EqualTolerance(MillimetersPerKilogramForceInOneMeterPerKilogramForce, meterperkilogramforce.MillimetersPerKilogramForce, MillimetersPerKilogramForceTolerance);
            AssertEx.EqualTolerance(MillimetersPerNewtonInOneMeterPerKilogramForce, meterperkilogramforce.MillimetersPerNewton, MillimetersPerNewtonTolerance);
            AssertEx.EqualTolerance(NanometersPerKilogramForceInOneMeterPerKilogramForce, meterperkilogramforce.NanometersPerKilogramForce, NanometersPerKilogramForceTolerance);
            AssertEx.EqualTolerance(NanometersPerNewtonInOneMeterPerKilogramForce, meterperkilogramforce.NanometersPerNewton, NanometersPerNewtonTolerance);
            AssertEx.EqualTolerance(NauticalMilesPerPoundForceInOneMeterPerKilogramForce, meterperkilogramforce.NauticalMilesPerPoundForce, NauticalMilesPerPoundForceTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            var quantity00 = SpecificRange.From(1, SpecificRangeUnit.CentimeterPerKilogramForce);
            AssertEx.EqualTolerance(1, quantity00.CentimetersPerKilogramForce, CentimetersPerKilogramForceTolerance);
            Assert.Equal(SpecificRangeUnit.CentimeterPerKilogramForce, quantity00.Unit);

            var quantity01 = SpecificRange.From(1, SpecificRangeUnit.CentimeterPerNewton);
            AssertEx.EqualTolerance(1, quantity01.CentimetersPerNewton, CentimetersPerNewtonTolerance);
            Assert.Equal(SpecificRangeUnit.CentimeterPerNewton, quantity01.Unit);

            var quantity02 = SpecificRange.From(1, SpecificRangeUnit.DecameterPerKilogramForce);
            AssertEx.EqualTolerance(1, quantity02.DecametersPerKilogramForce, DecametersPerKilogramForceTolerance);
            Assert.Equal(SpecificRangeUnit.DecameterPerKilogramForce, quantity02.Unit);

            var quantity03 = SpecificRange.From(1, SpecificRangeUnit.DecameterPerNewton);
            AssertEx.EqualTolerance(1, quantity03.DecametersPerNewton, DecametersPerNewtonTolerance);
            Assert.Equal(SpecificRangeUnit.DecameterPerNewton, quantity03.Unit);

            var quantity04 = SpecificRange.From(1, SpecificRangeUnit.DecimeterPerKilogramForce);
            AssertEx.EqualTolerance(1, quantity04.DecimetersPerKilogramForce, DecimetersPerKilogramForceTolerance);
            Assert.Equal(SpecificRangeUnit.DecimeterPerKilogramForce, quantity04.Unit);

            var quantity05 = SpecificRange.From(1, SpecificRangeUnit.DecimeterPerNewton);
            AssertEx.EqualTolerance(1, quantity05.DecimetersPerNewton, DecimetersPerNewtonTolerance);
            Assert.Equal(SpecificRangeUnit.DecimeterPerNewton, quantity05.Unit);

            var quantity06 = SpecificRange.From(1, SpecificRangeUnit.KilometerPerKilogramForce);
            AssertEx.EqualTolerance(1, quantity06.KilometersPerKilogramForce, KilometersPerKilogramForceTolerance);
            Assert.Equal(SpecificRangeUnit.KilometerPerKilogramForce, quantity06.Unit);

            var quantity07 = SpecificRange.From(1, SpecificRangeUnit.KilometerPerNewton);
            AssertEx.EqualTolerance(1, quantity07.KilometersPerNewton, KilometersPerNewtonTolerance);
            Assert.Equal(SpecificRangeUnit.KilometerPerNewton, quantity07.Unit);

            var quantity08 = SpecificRange.From(1, SpecificRangeUnit.MegameterPerKilogramForce);
            AssertEx.EqualTolerance(1, quantity08.MegametersPerKilogramForce, MegametersPerKilogramForceTolerance);
            Assert.Equal(SpecificRangeUnit.MegameterPerKilogramForce, quantity08.Unit);

            var quantity09 = SpecificRange.From(1, SpecificRangeUnit.MegameterPerNewton);
            AssertEx.EqualTolerance(1, quantity09.MegametersPerNewton, MegametersPerNewtonTolerance);
            Assert.Equal(SpecificRangeUnit.MegameterPerNewton, quantity09.Unit);

            var quantity10 = SpecificRange.From(1, SpecificRangeUnit.MeterPerKilogramForce);
            AssertEx.EqualTolerance(1, quantity10.MetersPerKilogramForce, MetersPerKilogramForceTolerance);
            Assert.Equal(SpecificRangeUnit.MeterPerKilogramForce, quantity10.Unit);

            var quantity11 = SpecificRange.From(1, SpecificRangeUnit.MeterPerNewton);
            AssertEx.EqualTolerance(1, quantity11.MetersPerNewton, MetersPerNewtonTolerance);
            Assert.Equal(SpecificRangeUnit.MeterPerNewton, quantity11.Unit);

            var quantity12 = SpecificRange.From(1, SpecificRangeUnit.MicrometerPerKilogramForce);
            AssertEx.EqualTolerance(1, quantity12.MicrometersPerKilogramForce, MicrometersPerKilogramForceTolerance);
            Assert.Equal(SpecificRangeUnit.MicrometerPerKilogramForce, quantity12.Unit);

            var quantity13 = SpecificRange.From(1, SpecificRangeUnit.MicrometerPerNewton);
            AssertEx.EqualTolerance(1, quantity13.MicrometersPerNewton, MicrometersPerNewtonTolerance);
            Assert.Equal(SpecificRangeUnit.MicrometerPerNewton, quantity13.Unit);

            var quantity14 = SpecificRange.From(1, SpecificRangeUnit.MillimeterPerKilogramForce);
            AssertEx.EqualTolerance(1, quantity14.MillimetersPerKilogramForce, MillimetersPerKilogramForceTolerance);
            Assert.Equal(SpecificRangeUnit.MillimeterPerKilogramForce, quantity14.Unit);

            var quantity15 = SpecificRange.From(1, SpecificRangeUnit.MillimeterPerNewton);
            AssertEx.EqualTolerance(1, quantity15.MillimetersPerNewton, MillimetersPerNewtonTolerance);
            Assert.Equal(SpecificRangeUnit.MillimeterPerNewton, quantity15.Unit);

            var quantity16 = SpecificRange.From(1, SpecificRangeUnit.NanometerPerKilogramForce);
            AssertEx.EqualTolerance(1, quantity16.NanometersPerKilogramForce, NanometersPerKilogramForceTolerance);
            Assert.Equal(SpecificRangeUnit.NanometerPerKilogramForce, quantity16.Unit);

            var quantity17 = SpecificRange.From(1, SpecificRangeUnit.NanometerPerNewton);
            AssertEx.EqualTolerance(1, quantity17.NanometersPerNewton, NanometersPerNewtonTolerance);
            Assert.Equal(SpecificRangeUnit.NanometerPerNewton, quantity17.Unit);

            var quantity18 = SpecificRange.From(1, SpecificRangeUnit.NauticalMilePerPoundForce);
            AssertEx.EqualTolerance(1, quantity18.NauticalMilesPerPoundForce, NauticalMilesPerPoundForceTolerance);
            Assert.Equal(SpecificRangeUnit.NauticalMilePerPoundForce, quantity18.Unit);

        }

        [Fact]
        public void FromMetersPerKilogramForce_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => SpecificRange.FromMetersPerKilogramForce(double.PositiveInfinity));
            Assert.Throws<ArgumentException>(() => SpecificRange.FromMetersPerKilogramForce(double.NegativeInfinity));
        }

        [Fact]
        public void FromMetersPerKilogramForce_WithNanValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => SpecificRange.FromMetersPerKilogramForce(double.NaN));
        }

        [Fact]
        public void As()
        {
            var meterperkilogramforce = SpecificRange.FromMetersPerKilogramForce(1);
            AssertEx.EqualTolerance(CentimetersPerKilogramForceInOneMeterPerKilogramForce, meterperkilogramforce.As(SpecificRangeUnit.CentimeterPerKilogramForce), CentimetersPerKilogramForceTolerance);
            AssertEx.EqualTolerance(CentimetersPerNewtonInOneMeterPerKilogramForce, meterperkilogramforce.As(SpecificRangeUnit.CentimeterPerNewton), CentimetersPerNewtonTolerance);
            AssertEx.EqualTolerance(DecametersPerKilogramForceInOneMeterPerKilogramForce, meterperkilogramforce.As(SpecificRangeUnit.DecameterPerKilogramForce), DecametersPerKilogramForceTolerance);
            AssertEx.EqualTolerance(DecametersPerNewtonInOneMeterPerKilogramForce, meterperkilogramforce.As(SpecificRangeUnit.DecameterPerNewton), DecametersPerNewtonTolerance);
            AssertEx.EqualTolerance(DecimetersPerKilogramForceInOneMeterPerKilogramForce, meterperkilogramforce.As(SpecificRangeUnit.DecimeterPerKilogramForce), DecimetersPerKilogramForceTolerance);
            AssertEx.EqualTolerance(DecimetersPerNewtonInOneMeterPerKilogramForce, meterperkilogramforce.As(SpecificRangeUnit.DecimeterPerNewton), DecimetersPerNewtonTolerance);
            AssertEx.EqualTolerance(KilometersPerKilogramForceInOneMeterPerKilogramForce, meterperkilogramforce.As(SpecificRangeUnit.KilometerPerKilogramForce), KilometersPerKilogramForceTolerance);
            AssertEx.EqualTolerance(KilometersPerNewtonInOneMeterPerKilogramForce, meterperkilogramforce.As(SpecificRangeUnit.KilometerPerNewton), KilometersPerNewtonTolerance);
            AssertEx.EqualTolerance(MegametersPerKilogramForceInOneMeterPerKilogramForce, meterperkilogramforce.As(SpecificRangeUnit.MegameterPerKilogramForce), MegametersPerKilogramForceTolerance);
            AssertEx.EqualTolerance(MegametersPerNewtonInOneMeterPerKilogramForce, meterperkilogramforce.As(SpecificRangeUnit.MegameterPerNewton), MegametersPerNewtonTolerance);
            AssertEx.EqualTolerance(MetersPerKilogramForceInOneMeterPerKilogramForce, meterperkilogramforce.As(SpecificRangeUnit.MeterPerKilogramForce), MetersPerKilogramForceTolerance);
            AssertEx.EqualTolerance(MetersPerNewtonInOneMeterPerKilogramForce, meterperkilogramforce.As(SpecificRangeUnit.MeterPerNewton), MetersPerNewtonTolerance);
            AssertEx.EqualTolerance(MicrometersPerKilogramForceInOneMeterPerKilogramForce, meterperkilogramforce.As(SpecificRangeUnit.MicrometerPerKilogramForce), MicrometersPerKilogramForceTolerance);
            AssertEx.EqualTolerance(MicrometersPerNewtonInOneMeterPerKilogramForce, meterperkilogramforce.As(SpecificRangeUnit.MicrometerPerNewton), MicrometersPerNewtonTolerance);
            AssertEx.EqualTolerance(MillimetersPerKilogramForceInOneMeterPerKilogramForce, meterperkilogramforce.As(SpecificRangeUnit.MillimeterPerKilogramForce), MillimetersPerKilogramForceTolerance);
            AssertEx.EqualTolerance(MillimetersPerNewtonInOneMeterPerKilogramForce, meterperkilogramforce.As(SpecificRangeUnit.MillimeterPerNewton), MillimetersPerNewtonTolerance);
            AssertEx.EqualTolerance(NanometersPerKilogramForceInOneMeterPerKilogramForce, meterperkilogramforce.As(SpecificRangeUnit.NanometerPerKilogramForce), NanometersPerKilogramForceTolerance);
            AssertEx.EqualTolerance(NanometersPerNewtonInOneMeterPerKilogramForce, meterperkilogramforce.As(SpecificRangeUnit.NanometerPerNewton), NanometersPerNewtonTolerance);
            AssertEx.EqualTolerance(NauticalMilesPerPoundForceInOneMeterPerKilogramForce, meterperkilogramforce.As(SpecificRangeUnit.NauticalMilePerPoundForce), NauticalMilesPerPoundForceTolerance);
        }

        [Fact]
        public void As_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new SpecificRange(value: 1, unit: SpecificRange.BaseUnit);
            Func<object> AsWithSIUnitSystem = () => quantity.As(UnitSystem.SI);

            if (SupportsSIUnitSystem)
            {
                var value = (double) AsWithSIUnitSystem();
                Assert.Equal(1, value);
            }
            else
            {
                Assert.Throws<ArgumentException>(AsWithSIUnitSystem);
            }
        }

        [Fact]
        public void ToUnit()
        {
            var meterperkilogramforce = SpecificRange.FromMetersPerKilogramForce(1);

            var centimeterperkilogramforceQuantity = meterperkilogramforce.ToUnit(SpecificRangeUnit.CentimeterPerKilogramForce);
            AssertEx.EqualTolerance(CentimetersPerKilogramForceInOneMeterPerKilogramForce, (double)centimeterperkilogramforceQuantity.Value, CentimetersPerKilogramForceTolerance);
            Assert.Equal(SpecificRangeUnit.CentimeterPerKilogramForce, centimeterperkilogramforceQuantity.Unit);

            var centimeterpernewtonQuantity = meterperkilogramforce.ToUnit(SpecificRangeUnit.CentimeterPerNewton);
            AssertEx.EqualTolerance(CentimetersPerNewtonInOneMeterPerKilogramForce, (double)centimeterpernewtonQuantity.Value, CentimetersPerNewtonTolerance);
            Assert.Equal(SpecificRangeUnit.CentimeterPerNewton, centimeterpernewtonQuantity.Unit);

            var decameterperkilogramforceQuantity = meterperkilogramforce.ToUnit(SpecificRangeUnit.DecameterPerKilogramForce);
            AssertEx.EqualTolerance(DecametersPerKilogramForceInOneMeterPerKilogramForce, (double)decameterperkilogramforceQuantity.Value, DecametersPerKilogramForceTolerance);
            Assert.Equal(SpecificRangeUnit.DecameterPerKilogramForce, decameterperkilogramforceQuantity.Unit);

            var decameterpernewtonQuantity = meterperkilogramforce.ToUnit(SpecificRangeUnit.DecameterPerNewton);
            AssertEx.EqualTolerance(DecametersPerNewtonInOneMeterPerKilogramForce, (double)decameterpernewtonQuantity.Value, DecametersPerNewtonTolerance);
            Assert.Equal(SpecificRangeUnit.DecameterPerNewton, decameterpernewtonQuantity.Unit);

            var decimeterperkilogramforceQuantity = meterperkilogramforce.ToUnit(SpecificRangeUnit.DecimeterPerKilogramForce);
            AssertEx.EqualTolerance(DecimetersPerKilogramForceInOneMeterPerKilogramForce, (double)decimeterperkilogramforceQuantity.Value, DecimetersPerKilogramForceTolerance);
            Assert.Equal(SpecificRangeUnit.DecimeterPerKilogramForce, decimeterperkilogramforceQuantity.Unit);

            var decimeterpernewtonQuantity = meterperkilogramforce.ToUnit(SpecificRangeUnit.DecimeterPerNewton);
            AssertEx.EqualTolerance(DecimetersPerNewtonInOneMeterPerKilogramForce, (double)decimeterpernewtonQuantity.Value, DecimetersPerNewtonTolerance);
            Assert.Equal(SpecificRangeUnit.DecimeterPerNewton, decimeterpernewtonQuantity.Unit);

            var kilometerperkilogramforceQuantity = meterperkilogramforce.ToUnit(SpecificRangeUnit.KilometerPerKilogramForce);
            AssertEx.EqualTolerance(KilometersPerKilogramForceInOneMeterPerKilogramForce, (double)kilometerperkilogramforceQuantity.Value, KilometersPerKilogramForceTolerance);
            Assert.Equal(SpecificRangeUnit.KilometerPerKilogramForce, kilometerperkilogramforceQuantity.Unit);

            var kilometerpernewtonQuantity = meterperkilogramforce.ToUnit(SpecificRangeUnit.KilometerPerNewton);
            AssertEx.EqualTolerance(KilometersPerNewtonInOneMeterPerKilogramForce, (double)kilometerpernewtonQuantity.Value, KilometersPerNewtonTolerance);
            Assert.Equal(SpecificRangeUnit.KilometerPerNewton, kilometerpernewtonQuantity.Unit);

            var megameterperkilogramforceQuantity = meterperkilogramforce.ToUnit(SpecificRangeUnit.MegameterPerKilogramForce);
            AssertEx.EqualTolerance(MegametersPerKilogramForceInOneMeterPerKilogramForce, (double)megameterperkilogramforceQuantity.Value, MegametersPerKilogramForceTolerance);
            Assert.Equal(SpecificRangeUnit.MegameterPerKilogramForce, megameterperkilogramforceQuantity.Unit);

            var megameterpernewtonQuantity = meterperkilogramforce.ToUnit(SpecificRangeUnit.MegameterPerNewton);
            AssertEx.EqualTolerance(MegametersPerNewtonInOneMeterPerKilogramForce, (double)megameterpernewtonQuantity.Value, MegametersPerNewtonTolerance);
            Assert.Equal(SpecificRangeUnit.MegameterPerNewton, megameterpernewtonQuantity.Unit);

            var meterperkilogramforceQuantity = meterperkilogramforce.ToUnit(SpecificRangeUnit.MeterPerKilogramForce);
            AssertEx.EqualTolerance(MetersPerKilogramForceInOneMeterPerKilogramForce, (double)meterperkilogramforceQuantity.Value, MetersPerKilogramForceTolerance);
            Assert.Equal(SpecificRangeUnit.MeterPerKilogramForce, meterperkilogramforceQuantity.Unit);

            var meterpernewtonQuantity = meterperkilogramforce.ToUnit(SpecificRangeUnit.MeterPerNewton);
            AssertEx.EqualTolerance(MetersPerNewtonInOneMeterPerKilogramForce, (double)meterpernewtonQuantity.Value, MetersPerNewtonTolerance);
            Assert.Equal(SpecificRangeUnit.MeterPerNewton, meterpernewtonQuantity.Unit);

            var micrometerperkilogramforceQuantity = meterperkilogramforce.ToUnit(SpecificRangeUnit.MicrometerPerKilogramForce);
            AssertEx.EqualTolerance(MicrometersPerKilogramForceInOneMeterPerKilogramForce, (double)micrometerperkilogramforceQuantity.Value, MicrometersPerKilogramForceTolerance);
            Assert.Equal(SpecificRangeUnit.MicrometerPerKilogramForce, micrometerperkilogramforceQuantity.Unit);

            var micrometerpernewtonQuantity = meterperkilogramforce.ToUnit(SpecificRangeUnit.MicrometerPerNewton);
            AssertEx.EqualTolerance(MicrometersPerNewtonInOneMeterPerKilogramForce, (double)micrometerpernewtonQuantity.Value, MicrometersPerNewtonTolerance);
            Assert.Equal(SpecificRangeUnit.MicrometerPerNewton, micrometerpernewtonQuantity.Unit);

            var millimeterperkilogramforceQuantity = meterperkilogramforce.ToUnit(SpecificRangeUnit.MillimeterPerKilogramForce);
            AssertEx.EqualTolerance(MillimetersPerKilogramForceInOneMeterPerKilogramForce, (double)millimeterperkilogramforceQuantity.Value, MillimetersPerKilogramForceTolerance);
            Assert.Equal(SpecificRangeUnit.MillimeterPerKilogramForce, millimeterperkilogramforceQuantity.Unit);

            var millimeterpernewtonQuantity = meterperkilogramforce.ToUnit(SpecificRangeUnit.MillimeterPerNewton);
            AssertEx.EqualTolerance(MillimetersPerNewtonInOneMeterPerKilogramForce, (double)millimeterpernewtonQuantity.Value, MillimetersPerNewtonTolerance);
            Assert.Equal(SpecificRangeUnit.MillimeterPerNewton, millimeterpernewtonQuantity.Unit);

            var nanometerperkilogramforceQuantity = meterperkilogramforce.ToUnit(SpecificRangeUnit.NanometerPerKilogramForce);
            AssertEx.EqualTolerance(NanometersPerKilogramForceInOneMeterPerKilogramForce, (double)nanometerperkilogramforceQuantity.Value, NanometersPerKilogramForceTolerance);
            Assert.Equal(SpecificRangeUnit.NanometerPerKilogramForce, nanometerperkilogramforceQuantity.Unit);

            var nanometerpernewtonQuantity = meterperkilogramforce.ToUnit(SpecificRangeUnit.NanometerPerNewton);
            AssertEx.EqualTolerance(NanometersPerNewtonInOneMeterPerKilogramForce, (double)nanometerpernewtonQuantity.Value, NanometersPerNewtonTolerance);
            Assert.Equal(SpecificRangeUnit.NanometerPerNewton, nanometerpernewtonQuantity.Unit);

            var nauticalmileperpoundforceQuantity = meterperkilogramforce.ToUnit(SpecificRangeUnit.NauticalMilePerPoundForce);
            AssertEx.EqualTolerance(NauticalMilesPerPoundForceInOneMeterPerKilogramForce, (double)nauticalmileperpoundforceQuantity.Value, NauticalMilesPerPoundForceTolerance);
            Assert.Equal(SpecificRangeUnit.NauticalMilePerPoundForce, nauticalmileperpoundforceQuantity.Unit);
        }

        [Fact]
        public void ToBaseUnit_ReturnsQuantityWithBaseUnit()
        {
            var quantityInBaseUnit = SpecificRange.FromMetersPerKilogramForce(1).ToBaseUnit();
            Assert.Equal(SpecificRange.BaseUnit, quantityInBaseUnit.Unit);
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            SpecificRange meterperkilogramforce = SpecificRange.FromMetersPerKilogramForce(1);
            AssertEx.EqualTolerance(1, SpecificRange.FromCentimetersPerKilogramForce(meterperkilogramforce.CentimetersPerKilogramForce).MetersPerKilogramForce, CentimetersPerKilogramForceTolerance);
            AssertEx.EqualTolerance(1, SpecificRange.FromCentimetersPerNewton(meterperkilogramforce.CentimetersPerNewton).MetersPerKilogramForce, CentimetersPerNewtonTolerance);
            AssertEx.EqualTolerance(1, SpecificRange.FromDecametersPerKilogramForce(meterperkilogramforce.DecametersPerKilogramForce).MetersPerKilogramForce, DecametersPerKilogramForceTolerance);
            AssertEx.EqualTolerance(1, SpecificRange.FromDecametersPerNewton(meterperkilogramforce.DecametersPerNewton).MetersPerKilogramForce, DecametersPerNewtonTolerance);
            AssertEx.EqualTolerance(1, SpecificRange.FromDecimetersPerKilogramForce(meterperkilogramforce.DecimetersPerKilogramForce).MetersPerKilogramForce, DecimetersPerKilogramForceTolerance);
            AssertEx.EqualTolerance(1, SpecificRange.FromDecimetersPerNewton(meterperkilogramforce.DecimetersPerNewton).MetersPerKilogramForce, DecimetersPerNewtonTolerance);
            AssertEx.EqualTolerance(1, SpecificRange.FromKilometersPerKilogramForce(meterperkilogramforce.KilometersPerKilogramForce).MetersPerKilogramForce, KilometersPerKilogramForceTolerance);
            AssertEx.EqualTolerance(1, SpecificRange.FromKilometersPerNewton(meterperkilogramforce.KilometersPerNewton).MetersPerKilogramForce, KilometersPerNewtonTolerance);
            AssertEx.EqualTolerance(1, SpecificRange.FromMegametersPerKilogramForce(meterperkilogramforce.MegametersPerKilogramForce).MetersPerKilogramForce, MegametersPerKilogramForceTolerance);
            AssertEx.EqualTolerance(1, SpecificRange.FromMegametersPerNewton(meterperkilogramforce.MegametersPerNewton).MetersPerKilogramForce, MegametersPerNewtonTolerance);
            AssertEx.EqualTolerance(1, SpecificRange.FromMetersPerKilogramForce(meterperkilogramforce.MetersPerKilogramForce).MetersPerKilogramForce, MetersPerKilogramForceTolerance);
            AssertEx.EqualTolerance(1, SpecificRange.FromMetersPerNewton(meterperkilogramforce.MetersPerNewton).MetersPerKilogramForce, MetersPerNewtonTolerance);
            AssertEx.EqualTolerance(1, SpecificRange.FromMicrometersPerKilogramForce(meterperkilogramforce.MicrometersPerKilogramForce).MetersPerKilogramForce, MicrometersPerKilogramForceTolerance);
            AssertEx.EqualTolerance(1, SpecificRange.FromMicrometersPerNewton(meterperkilogramforce.MicrometersPerNewton).MetersPerKilogramForce, MicrometersPerNewtonTolerance);
            AssertEx.EqualTolerance(1, SpecificRange.FromMillimetersPerKilogramForce(meterperkilogramforce.MillimetersPerKilogramForce).MetersPerKilogramForce, MillimetersPerKilogramForceTolerance);
            AssertEx.EqualTolerance(1, SpecificRange.FromMillimetersPerNewton(meterperkilogramforce.MillimetersPerNewton).MetersPerKilogramForce, MillimetersPerNewtonTolerance);
            AssertEx.EqualTolerance(1, SpecificRange.FromNanometersPerKilogramForce(meterperkilogramforce.NanometersPerKilogramForce).MetersPerKilogramForce, NanometersPerKilogramForceTolerance);
            AssertEx.EqualTolerance(1, SpecificRange.FromNanometersPerNewton(meterperkilogramforce.NanometersPerNewton).MetersPerKilogramForce, NanometersPerNewtonTolerance);
            AssertEx.EqualTolerance(1, SpecificRange.FromNauticalMilesPerPoundForce(meterperkilogramforce.NauticalMilesPerPoundForce).MetersPerKilogramForce, NauticalMilesPerPoundForceTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            SpecificRange v = SpecificRange.FromMetersPerKilogramForce(1);
            AssertEx.EqualTolerance(-1, -v.MetersPerKilogramForce, MetersPerKilogramForceTolerance);
            AssertEx.EqualTolerance(2, (SpecificRange.FromMetersPerKilogramForce(3)-v).MetersPerKilogramForce, MetersPerKilogramForceTolerance);
            AssertEx.EqualTolerance(2, (v + v).MetersPerKilogramForce, MetersPerKilogramForceTolerance);
            AssertEx.EqualTolerance(10, (v*10).MetersPerKilogramForce, MetersPerKilogramForceTolerance);
            AssertEx.EqualTolerance(10, (10*v).MetersPerKilogramForce, MetersPerKilogramForceTolerance);
            AssertEx.EqualTolerance(2, (SpecificRange.FromMetersPerKilogramForce(10)/5).MetersPerKilogramForce, MetersPerKilogramForceTolerance);
            AssertEx.EqualTolerance(2, SpecificRange.FromMetersPerKilogramForce(10)/SpecificRange.FromMetersPerKilogramForce(5), MetersPerKilogramForceTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            SpecificRange oneMeterPerKilogramForce = SpecificRange.FromMetersPerKilogramForce(1);
            SpecificRange twoMetersPerKilogramForce = SpecificRange.FromMetersPerKilogramForce(2);

            Assert.True(oneMeterPerKilogramForce < twoMetersPerKilogramForce);
            Assert.True(oneMeterPerKilogramForce <= twoMetersPerKilogramForce);
            Assert.True(twoMetersPerKilogramForce > oneMeterPerKilogramForce);
            Assert.True(twoMetersPerKilogramForce >= oneMeterPerKilogramForce);

            Assert.False(oneMeterPerKilogramForce > twoMetersPerKilogramForce);
            Assert.False(oneMeterPerKilogramForce >= twoMetersPerKilogramForce);
            Assert.False(twoMetersPerKilogramForce < oneMeterPerKilogramForce);
            Assert.False(twoMetersPerKilogramForce <= oneMeterPerKilogramForce);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            SpecificRange meterperkilogramforce = SpecificRange.FromMetersPerKilogramForce(1);
            Assert.Equal(0, meterperkilogramforce.CompareTo(meterperkilogramforce));
            Assert.True(meterperkilogramforce.CompareTo(SpecificRange.Zero) > 0);
            Assert.True(SpecificRange.Zero.CompareTo(meterperkilogramforce) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            SpecificRange meterperkilogramforce = SpecificRange.FromMetersPerKilogramForce(1);
            Assert.Throws<ArgumentException>(() => meterperkilogramforce.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            SpecificRange meterperkilogramforce = SpecificRange.FromMetersPerKilogramForce(1);
            Assert.Throws<ArgumentNullException>(() => meterperkilogramforce.CompareTo(null));
        }

        [Fact]
        public void EqualityOperators()
        {
            var a = SpecificRange.FromMetersPerKilogramForce(1);
            var b = SpecificRange.FromMetersPerKilogramForce(2);

#pragma warning disable CS8073
// ReSharper disable EqualExpressionComparison

            Assert.True(a == a);
            Assert.False(a != a);

            Assert.True(a != b);
            Assert.False(a == b);

            Assert.False(a == null);
            Assert.False(null == a);

// ReSharper restore EqualExpressionComparison
#pragma warning restore CS8073
        }

        [Fact]
        public void Equals_SameType_IsImplemented()
        {
            var a = SpecificRange.FromMetersPerKilogramForce(1);
            var b = SpecificRange.FromMetersPerKilogramForce(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
        }

        [Fact]
        public void Equals_QuantityAsObject_IsImplemented()
        {
            object a = SpecificRange.FromMetersPerKilogramForce(1);
            object b = SpecificRange.FromMetersPerKilogramForce(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
            Assert.False(a.Equals((object)null));
        }

        [Fact]
        public void Equals_RelativeTolerance_IsImplemented()
        {
            var v = SpecificRange.FromMetersPerKilogramForce(1);
            Assert.True(v.Equals(SpecificRange.FromMetersPerKilogramForce(1), MetersPerKilogramForceTolerance, ComparisonType.Relative));
            Assert.False(v.Equals(SpecificRange.Zero, MetersPerKilogramForceTolerance, ComparisonType.Relative));
        }

        [Fact]
        public void Equals_NegativeRelativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var v = SpecificRange.FromMetersPerKilogramForce(1);
            Assert.Throws<ArgumentOutOfRangeException>(() => v.Equals(SpecificRange.FromMetersPerKilogramForce(1), -1, ComparisonType.Relative));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            SpecificRange meterperkilogramforce = SpecificRange.FromMetersPerKilogramForce(1);
            Assert.False(meterperkilogramforce.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            SpecificRange meterperkilogramforce = SpecificRange.FromMetersPerKilogramForce(1);
            Assert.False(meterperkilogramforce.Equals(null));
        }

        [Fact]
        public void UnitsDoesNotContainUndefined()
        {
            Assert.DoesNotContain(SpecificRangeUnit.Undefined, SpecificRange.Units);
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues(typeof(SpecificRangeUnit)).Cast<SpecificRangeUnit>();
            foreach(var unit in units)
            {
                if(unit == SpecificRangeUnit.Undefined)
                    continue;

                var defaultAbbreviation = UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(SpecificRange.BaseDimensions is null);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            var prevCulture = Thread.CurrentThread.CurrentUICulture;
            Thread.CurrentThread.CurrentUICulture = CultureInfo.GetCultureInfo("en-US");
            try {
                Assert.Equal("1 cm/kgf", new SpecificRange(1, SpecificRangeUnit.CentimeterPerKilogramForce).ToString());
                Assert.Equal("1 cm/N", new SpecificRange(1, SpecificRangeUnit.CentimeterPerNewton).ToString());
                Assert.Equal("1 dam/kgf", new SpecificRange(1, SpecificRangeUnit.DecameterPerKilogramForce).ToString());
                Assert.Equal("1 dam/N", new SpecificRange(1, SpecificRangeUnit.DecameterPerNewton).ToString());
                Assert.Equal("1 dm/kgf", new SpecificRange(1, SpecificRangeUnit.DecimeterPerKilogramForce).ToString());
                Assert.Equal("1 dm/N", new SpecificRange(1, SpecificRangeUnit.DecimeterPerNewton).ToString());
                Assert.Equal("1 km/kgf", new SpecificRange(1, SpecificRangeUnit.KilometerPerKilogramForce).ToString());
                Assert.Equal("1 km/N", new SpecificRange(1, SpecificRangeUnit.KilometerPerNewton).ToString());
                Assert.Equal("1 Mm/kgf", new SpecificRange(1, SpecificRangeUnit.MegameterPerKilogramForce).ToString());
                Assert.Equal("1 Mm/N", new SpecificRange(1, SpecificRangeUnit.MegameterPerNewton).ToString());
                Assert.Equal("1 m/kgf", new SpecificRange(1, SpecificRangeUnit.MeterPerKilogramForce).ToString());
                Assert.Equal("1 m/N", new SpecificRange(1, SpecificRangeUnit.MeterPerNewton).ToString());
                Assert.Equal("1 µm/kgf", new SpecificRange(1, SpecificRangeUnit.MicrometerPerKilogramForce).ToString());
                Assert.Equal("1 µm/N", new SpecificRange(1, SpecificRangeUnit.MicrometerPerNewton).ToString());
                Assert.Equal("1 mm/kgf", new SpecificRange(1, SpecificRangeUnit.MillimeterPerKilogramForce).ToString());
                Assert.Equal("1 mm/N", new SpecificRange(1, SpecificRangeUnit.MillimeterPerNewton).ToString());
                Assert.Equal("1 nm/kgf", new SpecificRange(1, SpecificRangeUnit.NanometerPerKilogramForce).ToString());
                Assert.Equal("1 nm/N", new SpecificRange(1, SpecificRangeUnit.NanometerPerNewton).ToString());
                Assert.Equal("1 nmi/lbf", new SpecificRange(1, SpecificRangeUnit.NauticalMilePerPoundForce).ToString());
            }
            finally
            {
                Thread.CurrentThread.CurrentUICulture = prevCulture;
            }
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 cm/kgf", new SpecificRange(1, SpecificRangeUnit.CentimeterPerKilogramForce).ToString(swedishCulture));
            Assert.Equal("1 cm/N", new SpecificRange(1, SpecificRangeUnit.CentimeterPerNewton).ToString(swedishCulture));
            Assert.Equal("1 dam/kgf", new SpecificRange(1, SpecificRangeUnit.DecameterPerKilogramForce).ToString(swedishCulture));
            Assert.Equal("1 dam/N", new SpecificRange(1, SpecificRangeUnit.DecameterPerNewton).ToString(swedishCulture));
            Assert.Equal("1 dm/kgf", new SpecificRange(1, SpecificRangeUnit.DecimeterPerKilogramForce).ToString(swedishCulture));
            Assert.Equal("1 dm/N", new SpecificRange(1, SpecificRangeUnit.DecimeterPerNewton).ToString(swedishCulture));
            Assert.Equal("1 km/kgf", new SpecificRange(1, SpecificRangeUnit.KilometerPerKilogramForce).ToString(swedishCulture));
            Assert.Equal("1 km/N", new SpecificRange(1, SpecificRangeUnit.KilometerPerNewton).ToString(swedishCulture));
            Assert.Equal("1 Mm/kgf", new SpecificRange(1, SpecificRangeUnit.MegameterPerKilogramForce).ToString(swedishCulture));
            Assert.Equal("1 Mm/N", new SpecificRange(1, SpecificRangeUnit.MegameterPerNewton).ToString(swedishCulture));
            Assert.Equal("1 m/kgf", new SpecificRange(1, SpecificRangeUnit.MeterPerKilogramForce).ToString(swedishCulture));
            Assert.Equal("1 m/N", new SpecificRange(1, SpecificRangeUnit.MeterPerNewton).ToString(swedishCulture));
            Assert.Equal("1 µm/kgf", new SpecificRange(1, SpecificRangeUnit.MicrometerPerKilogramForce).ToString(swedishCulture));
            Assert.Equal("1 µm/N", new SpecificRange(1, SpecificRangeUnit.MicrometerPerNewton).ToString(swedishCulture));
            Assert.Equal("1 mm/kgf", new SpecificRange(1, SpecificRangeUnit.MillimeterPerKilogramForce).ToString(swedishCulture));
            Assert.Equal("1 mm/N", new SpecificRange(1, SpecificRangeUnit.MillimeterPerNewton).ToString(swedishCulture));
            Assert.Equal("1 nm/kgf", new SpecificRange(1, SpecificRangeUnit.NanometerPerKilogramForce).ToString(swedishCulture));
            Assert.Equal("1 nm/N", new SpecificRange(1, SpecificRangeUnit.NanometerPerNewton).ToString(swedishCulture));
            Assert.Equal("1 nmi/lbf", new SpecificRange(1, SpecificRangeUnit.NauticalMilePerPoundForce).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var oldCulture = CultureInfo.CurrentUICulture;
            try
            {
                CultureInfo.CurrentUICulture = CultureInfo.InvariantCulture;
                Assert.Equal("0.1 m/kgf", new SpecificRange(0.123456, SpecificRangeUnit.MeterPerKilogramForce).ToString("s1"));
                Assert.Equal("0.12 m/kgf", new SpecificRange(0.123456, SpecificRangeUnit.MeterPerKilogramForce).ToString("s2"));
                Assert.Equal("0.123 m/kgf", new SpecificRange(0.123456, SpecificRangeUnit.MeterPerKilogramForce).ToString("s3"));
                Assert.Equal("0.1235 m/kgf", new SpecificRange(0.123456, SpecificRangeUnit.MeterPerKilogramForce).ToString("s4"));
            }
            finally
            {
                CultureInfo.CurrentUICulture = oldCulture;
            }
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 m/kgf", new SpecificRange(0.123456, SpecificRangeUnit.MeterPerKilogramForce).ToString("s1", culture));
            Assert.Equal("0.12 m/kgf", new SpecificRange(0.123456, SpecificRangeUnit.MeterPerKilogramForce).ToString("s2", culture));
            Assert.Equal("0.123 m/kgf", new SpecificRange(0.123456, SpecificRangeUnit.MeterPerKilogramForce).ToString("s3", culture));
            Assert.Equal("0.1235 m/kgf", new SpecificRange(0.123456, SpecificRangeUnit.MeterPerKilogramForce).ToString("s4", culture));
        }


        [Fact]
        public void ToString_NullFormat_ThrowsArgumentNullException()
        {
            var quantity = SpecificRange.FromMetersPerKilogramForce(1.0);
            Assert.Throws<ArgumentNullException>(() => quantity.ToString(null, null, null));
        }

        [Fact]
        public void ToString_NullArgs_ThrowsArgumentNullException()
        {
            var quantity = SpecificRange.FromMetersPerKilogramForce(1.0);
            Assert.Throws<ArgumentNullException>(() => quantity.ToString(null, "g", null));
        }

        [Fact]
        public void ToString_NullProvider_EqualsCurrentUICulture()
        {
            var quantity = SpecificRange.FromMetersPerKilogramForce(1.0);
            Assert.Equal(quantity.ToString(CultureInfo.CurrentUICulture, "g"), quantity.ToString(null, "g"));
        }


        [Fact]
        public void Convert_ToBool_ThrowsInvalidCastException()
        {
            var quantity = SpecificRange.FromMetersPerKilogramForce(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToBoolean(quantity));
        }

        [Fact]
        public void Convert_ToByte_EqualsValueAsSameType()
        {
            var quantity = SpecificRange.FromMetersPerKilogramForce(1.0);
           Assert.Equal((byte)quantity.Value, Convert.ToByte(quantity));
        }

        [Fact]
        public void Convert_ToChar_ThrowsInvalidCastException()
        {
            var quantity = SpecificRange.FromMetersPerKilogramForce(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToChar(quantity));
        }

        [Fact]
        public void Convert_ToDateTime_ThrowsInvalidCastException()
        {
            var quantity = SpecificRange.FromMetersPerKilogramForce(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToDateTime(quantity));
        }

        [Fact]
        public void Convert_ToDecimal_EqualsValueAsSameType()
        {
            var quantity = SpecificRange.FromMetersPerKilogramForce(1.0);
            Assert.Equal((decimal)quantity.Value, Convert.ToDecimal(quantity));
        }

        [Fact]
        public void Convert_ToDouble_EqualsValueAsSameType()
        {
            var quantity = SpecificRange.FromMetersPerKilogramForce(1.0);
            Assert.Equal((double)quantity.Value, Convert.ToDouble(quantity));
        }

        [Fact]
        public void Convert_ToInt16_EqualsValueAsSameType()
        {
            var quantity = SpecificRange.FromMetersPerKilogramForce(1.0);
            Assert.Equal((short)quantity.Value, Convert.ToInt16(quantity));
        }

        [Fact]
        public void Convert_ToInt32_EqualsValueAsSameType()
        {
            var quantity = SpecificRange.FromMetersPerKilogramForce(1.0);
            Assert.Equal((int)quantity.Value, Convert.ToInt32(quantity));
        }

        [Fact]
        public void Convert_ToInt64_EqualsValueAsSameType()
        {
            var quantity = SpecificRange.FromMetersPerKilogramForce(1.0);
            Assert.Equal((long)quantity.Value, Convert.ToInt64(quantity));
        }

        [Fact]
        public void Convert_ToSByte_EqualsValueAsSameType()
        {
            var quantity = SpecificRange.FromMetersPerKilogramForce(1.0);
            Assert.Equal((sbyte)quantity.Value, Convert.ToSByte(quantity));
        }

        [Fact]
        public void Convert_ToSingle_EqualsValueAsSameType()
        {
            var quantity = SpecificRange.FromMetersPerKilogramForce(1.0);
            Assert.Equal((float)quantity.Value, Convert.ToSingle(quantity));
        }

        [Fact]
        public void Convert_ToString_EqualsToString()
        {
            var quantity = SpecificRange.FromMetersPerKilogramForce(1.0);
            Assert.Equal(quantity.ToString(), Convert.ToString(quantity));
        }

        [Fact]
        public void Convert_ToUInt16_EqualsValueAsSameType()
        {
            var quantity = SpecificRange.FromMetersPerKilogramForce(1.0);
            Assert.Equal((ushort)quantity.Value, Convert.ToUInt16(quantity));
        }

        [Fact]
        public void Convert_ToUInt32_EqualsValueAsSameType()
        {
            var quantity = SpecificRange.FromMetersPerKilogramForce(1.0);
            Assert.Equal((uint)quantity.Value, Convert.ToUInt32(quantity));
        }

        [Fact]
        public void Convert_ToUInt64_EqualsValueAsSameType()
        {
            var quantity = SpecificRange.FromMetersPerKilogramForce(1.0);
            Assert.Equal((ulong)quantity.Value, Convert.ToUInt64(quantity));
        }

        [Fact]
        public void Convert_ChangeType_SelfType_EqualsSelf()
        {
            var quantity = SpecificRange.FromMetersPerKilogramForce(1.0);
            Assert.Equal(quantity, Convert.ChangeType(quantity, typeof(SpecificRange)));
        }

        [Fact]
        public void Convert_ChangeType_UnitType_EqualsUnit()
        {
            var quantity = SpecificRange.FromMetersPerKilogramForce(1.0);
            Assert.Equal(quantity.Unit, Convert.ChangeType(quantity, typeof(SpecificRangeUnit)));
        }

        [Fact]
        public void Convert_ChangeType_QuantityType_EqualsQuantityType()
        {
            var quantity = SpecificRange.FromMetersPerKilogramForce(1.0);
            Assert.Equal(QuantityType.SpecificRange, Convert.ChangeType(quantity, typeof(QuantityType)));
        }

        [Fact]
        public void Convert_ChangeType_QuantityInfo_EqualsQuantityInfo()
        {
            var quantity = SpecificRange.FromMetersPerKilogramForce(1.0);
            Assert.Equal(SpecificRange.Info, Convert.ChangeType(quantity, typeof(QuantityInfo)));
        }

        [Fact]
        public void Convert_ChangeType_BaseDimensions_EqualsBaseDimensions()
        {
            var quantity = SpecificRange.FromMetersPerKilogramForce(1.0);
            Assert.Equal(SpecificRange.BaseDimensions, Convert.ChangeType(quantity, typeof(BaseDimensions)));
        }

        [Fact]
        public void Convert_ChangeType_InvalidType_ThrowsInvalidCastException()
        {
            var quantity = SpecificRange.FromMetersPerKilogramForce(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ChangeType(quantity, typeof(QuantityFormatter)));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = SpecificRange.FromMetersPerKilogramForce(1.0);
            Assert.Equal(new {SpecificRange.Info.Name, quantity.Value, quantity.Unit}.GetHashCode(), quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = SpecificRange.FromMetersPerKilogramForce(value);
            Assert.Equal(SpecificRange.FromMetersPerKilogramForce(-value), -quantity);
        }
    }
}
