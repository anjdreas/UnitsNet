//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of InverseSpeed.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class InverseSpeedTestsBase : QuantityTestsBase
    {
        protected abstract double HoursPerFootInOneSecondPerMeter { get; }
        protected abstract double HoursPerInchInOneSecondPerMeter { get; }
        protected abstract double HoursPerMeterInOneSecondPerMeter { get; }
        protected abstract double HoursPerMileInOneSecondPerMeter { get; }
        protected abstract double InverseKnotsInOneSecondPerMeter { get; }
        protected abstract double MinutesPerFootInOneSecondPerMeter { get; }
        protected abstract double MinutesPerInchInOneSecondPerMeter { get; }
        protected abstract double MinutesPerMeterInOneSecondPerMeter { get; }
        protected abstract double SecondsPerFootInOneSecondPerMeter { get; }
        protected abstract double SecondsPerInchInOneSecondPerMeter { get; }
        protected abstract double SecondsPerMetersInOneSecondPerMeter { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double HoursPerFootTolerance { get { return 1e-5; } }
        protected virtual double HoursPerInchTolerance { get { return 1e-5; } }
        protected virtual double HoursPerMeterTolerance { get { return 1e-5; } }
        protected virtual double HoursPerMileTolerance { get { return 1e-5; } }
        protected virtual double InverseKnotsTolerance { get { return 1e-5; } }
        protected virtual double MinutesPerFootTolerance { get { return 1e-5; } }
        protected virtual double MinutesPerInchTolerance { get { return 1e-5; } }
        protected virtual double MinutesPerMeterTolerance { get { return 1e-5; } }
        protected virtual double SecondsPerFootTolerance { get { return 1e-5; } }
        protected virtual double SecondsPerInchTolerance { get { return 1e-5; } }
        protected virtual double SecondsPerMetersTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        [Fact]
        public void Ctor_WithUndefinedUnit_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new InverseSpeed((double)0.0, InverseSpeedUnit.Undefined));
        }

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new InverseSpeed();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(InverseSpeedUnit.SecondPerMeter, quantity.Unit);
        }


        [Fact]
        public void Ctor_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new InverseSpeed(double.PositiveInfinity, InverseSpeedUnit.SecondPerMeter));
            Assert.Throws<ArgumentException>(() => new InverseSpeed(double.NegativeInfinity, InverseSpeedUnit.SecondPerMeter));
        }

        [Fact]
        public void Ctor_WithNaNValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new InverseSpeed(double.NaN, InverseSpeedUnit.SecondPerMeter));
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new InverseSpeed(value: 1, unitSystem: null));
        }

        [Fact]
        public void Ctor_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            Func<object> TestCode = () => new InverseSpeed(value: 1, unitSystem: UnitSystem.SI);
            if (SupportsSIUnitSystem)
            {
                var quantity = (InverseSpeed) TestCode();
                Assert.Equal(1, quantity.Value);
            }
            else
            {
                Assert.Throws<ArgumentException>(TestCode);
            }
        }

        [Fact]
        public void InverseSpeed_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            var quantity = new InverseSpeed(1, InverseSpeedUnit.SecondPerMeter);

            QuantityInfo<InverseSpeedUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal(InverseSpeed.Zero, quantityInfo.Zero);
            Assert.Equal("InverseSpeed", quantityInfo.Name);
            Assert.Equal(QuantityType.InverseSpeed, quantityInfo.QuantityType);

            var units = EnumUtils.GetEnumValues<InverseSpeedUnit>().Except(new[] {InverseSpeedUnit.Undefined}).ToArray();
            var unitNames = units.Select(x => x.ToString());

            // Obsolete members
            Assert.Equal(units, quantityInfo.Units);
            Assert.Equal(unitNames, quantityInfo.UnitNames);
        }

        [Fact]
        public void SecondPerMeterToInverseSpeedUnits()
        {
            InverseSpeed secondpermeter = InverseSpeed.FromSecondsPerMeters(1);
            AssertEx.EqualTolerance(HoursPerFootInOneSecondPerMeter, secondpermeter.HoursPerFoot, HoursPerFootTolerance);
            AssertEx.EqualTolerance(HoursPerInchInOneSecondPerMeter, secondpermeter.HoursPerInch, HoursPerInchTolerance);
            AssertEx.EqualTolerance(HoursPerMeterInOneSecondPerMeter, secondpermeter.HoursPerMeter, HoursPerMeterTolerance);
            AssertEx.EqualTolerance(HoursPerMileInOneSecondPerMeter, secondpermeter.HoursPerMile, HoursPerMileTolerance);
            AssertEx.EqualTolerance(InverseKnotsInOneSecondPerMeter, secondpermeter.InverseKnots, InverseKnotsTolerance);
            AssertEx.EqualTolerance(MinutesPerFootInOneSecondPerMeter, secondpermeter.MinutesPerFoot, MinutesPerFootTolerance);
            AssertEx.EqualTolerance(MinutesPerInchInOneSecondPerMeter, secondpermeter.MinutesPerInch, MinutesPerInchTolerance);
            AssertEx.EqualTolerance(MinutesPerMeterInOneSecondPerMeter, secondpermeter.MinutesPerMeter, MinutesPerMeterTolerance);
            AssertEx.EqualTolerance(SecondsPerFootInOneSecondPerMeter, secondpermeter.SecondsPerFoot, SecondsPerFootTolerance);
            AssertEx.EqualTolerance(SecondsPerInchInOneSecondPerMeter, secondpermeter.SecondsPerInch, SecondsPerInchTolerance);
            AssertEx.EqualTolerance(SecondsPerMetersInOneSecondPerMeter, secondpermeter.SecondsPerMeters, SecondsPerMetersTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            var quantity00 = InverseSpeed.From(1, InverseSpeedUnit.HourPerFoot);
            AssertEx.EqualTolerance(1, quantity00.HoursPerFoot, HoursPerFootTolerance);
            Assert.Equal(InverseSpeedUnit.HourPerFoot, quantity00.Unit);

            var quantity01 = InverseSpeed.From(1, InverseSpeedUnit.HourPerInch);
            AssertEx.EqualTolerance(1, quantity01.HoursPerInch, HoursPerInchTolerance);
            Assert.Equal(InverseSpeedUnit.HourPerInch, quantity01.Unit);

            var quantity02 = InverseSpeed.From(1, InverseSpeedUnit.HourPerMeter);
            AssertEx.EqualTolerance(1, quantity02.HoursPerMeter, HoursPerMeterTolerance);
            Assert.Equal(InverseSpeedUnit.HourPerMeter, quantity02.Unit);

            var quantity03 = InverseSpeed.From(1, InverseSpeedUnit.HourPerMile);
            AssertEx.EqualTolerance(1, quantity03.HoursPerMile, HoursPerMileTolerance);
            Assert.Equal(InverseSpeedUnit.HourPerMile, quantity03.Unit);

            var quantity04 = InverseSpeed.From(1, InverseSpeedUnit.InverseKnot);
            AssertEx.EqualTolerance(1, quantity04.InverseKnots, InverseKnotsTolerance);
            Assert.Equal(InverseSpeedUnit.InverseKnot, quantity04.Unit);

            var quantity05 = InverseSpeed.From(1, InverseSpeedUnit.MinutePerFoot);
            AssertEx.EqualTolerance(1, quantity05.MinutesPerFoot, MinutesPerFootTolerance);
            Assert.Equal(InverseSpeedUnit.MinutePerFoot, quantity05.Unit);

            var quantity06 = InverseSpeed.From(1, InverseSpeedUnit.MinutePerInch);
            AssertEx.EqualTolerance(1, quantity06.MinutesPerInch, MinutesPerInchTolerance);
            Assert.Equal(InverseSpeedUnit.MinutePerInch, quantity06.Unit);

            var quantity07 = InverseSpeed.From(1, InverseSpeedUnit.MinutePerMeter);
            AssertEx.EqualTolerance(1, quantity07.MinutesPerMeter, MinutesPerMeterTolerance);
            Assert.Equal(InverseSpeedUnit.MinutePerMeter, quantity07.Unit);

            var quantity08 = InverseSpeed.From(1, InverseSpeedUnit.SecondPerFoot);
            AssertEx.EqualTolerance(1, quantity08.SecondsPerFoot, SecondsPerFootTolerance);
            Assert.Equal(InverseSpeedUnit.SecondPerFoot, quantity08.Unit);

            var quantity09 = InverseSpeed.From(1, InverseSpeedUnit.SecondPerInch);
            AssertEx.EqualTolerance(1, quantity09.SecondsPerInch, SecondsPerInchTolerance);
            Assert.Equal(InverseSpeedUnit.SecondPerInch, quantity09.Unit);

            var quantity10 = InverseSpeed.From(1, InverseSpeedUnit.SecondPerMeter);
            AssertEx.EqualTolerance(1, quantity10.SecondsPerMeters, SecondsPerMetersTolerance);
            Assert.Equal(InverseSpeedUnit.SecondPerMeter, quantity10.Unit);

        }

        [Fact]
        public void FromSecondsPerMeters_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => InverseSpeed.FromSecondsPerMeters(double.PositiveInfinity));
            Assert.Throws<ArgumentException>(() => InverseSpeed.FromSecondsPerMeters(double.NegativeInfinity));
        }

        [Fact]
        public void FromSecondsPerMeters_WithNanValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => InverseSpeed.FromSecondsPerMeters(double.NaN));
        }

        [Fact]
        public void As()
        {
            var secondpermeter = InverseSpeed.FromSecondsPerMeters(1);
            AssertEx.EqualTolerance(HoursPerFootInOneSecondPerMeter, secondpermeter.As(InverseSpeedUnit.HourPerFoot), HoursPerFootTolerance);
            AssertEx.EqualTolerance(HoursPerInchInOneSecondPerMeter, secondpermeter.As(InverseSpeedUnit.HourPerInch), HoursPerInchTolerance);
            AssertEx.EqualTolerance(HoursPerMeterInOneSecondPerMeter, secondpermeter.As(InverseSpeedUnit.HourPerMeter), HoursPerMeterTolerance);
            AssertEx.EqualTolerance(HoursPerMileInOneSecondPerMeter, secondpermeter.As(InverseSpeedUnit.HourPerMile), HoursPerMileTolerance);
            AssertEx.EqualTolerance(InverseKnotsInOneSecondPerMeter, secondpermeter.As(InverseSpeedUnit.InverseKnot), InverseKnotsTolerance);
            AssertEx.EqualTolerance(MinutesPerFootInOneSecondPerMeter, secondpermeter.As(InverseSpeedUnit.MinutePerFoot), MinutesPerFootTolerance);
            AssertEx.EqualTolerance(MinutesPerInchInOneSecondPerMeter, secondpermeter.As(InverseSpeedUnit.MinutePerInch), MinutesPerInchTolerance);
            AssertEx.EqualTolerance(MinutesPerMeterInOneSecondPerMeter, secondpermeter.As(InverseSpeedUnit.MinutePerMeter), MinutesPerMeterTolerance);
            AssertEx.EqualTolerance(SecondsPerFootInOneSecondPerMeter, secondpermeter.As(InverseSpeedUnit.SecondPerFoot), SecondsPerFootTolerance);
            AssertEx.EqualTolerance(SecondsPerInchInOneSecondPerMeter, secondpermeter.As(InverseSpeedUnit.SecondPerInch), SecondsPerInchTolerance);
            AssertEx.EqualTolerance(SecondsPerMetersInOneSecondPerMeter, secondpermeter.As(InverseSpeedUnit.SecondPerMeter), SecondsPerMetersTolerance);
        }

        [Fact]
        public void As_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new InverseSpeed(value: 1, unit: InverseSpeed.BaseUnit);
            Func<object> AsWithSIUnitSystem = () => quantity.As(UnitSystem.SI);

            if (SupportsSIUnitSystem)
            {
                var value = (double) AsWithSIUnitSystem();
                Assert.Equal(1, value);
            }
            else
            {
                Assert.Throws<ArgumentException>(AsWithSIUnitSystem);
            }
        }

        [Fact]
        public void ToUnit()
        {
            var secondpermeter = InverseSpeed.FromSecondsPerMeters(1);

            var hourperfootQuantity = secondpermeter.ToUnit(InverseSpeedUnit.HourPerFoot);
            AssertEx.EqualTolerance(HoursPerFootInOneSecondPerMeter, (double)hourperfootQuantity.Value, HoursPerFootTolerance);
            Assert.Equal(InverseSpeedUnit.HourPerFoot, hourperfootQuantity.Unit);

            var hourperinchQuantity = secondpermeter.ToUnit(InverseSpeedUnit.HourPerInch);
            AssertEx.EqualTolerance(HoursPerInchInOneSecondPerMeter, (double)hourperinchQuantity.Value, HoursPerInchTolerance);
            Assert.Equal(InverseSpeedUnit.HourPerInch, hourperinchQuantity.Unit);

            var hourpermeterQuantity = secondpermeter.ToUnit(InverseSpeedUnit.HourPerMeter);
            AssertEx.EqualTolerance(HoursPerMeterInOneSecondPerMeter, (double)hourpermeterQuantity.Value, HoursPerMeterTolerance);
            Assert.Equal(InverseSpeedUnit.HourPerMeter, hourpermeterQuantity.Unit);

            var hourpermileQuantity = secondpermeter.ToUnit(InverseSpeedUnit.HourPerMile);
            AssertEx.EqualTolerance(HoursPerMileInOneSecondPerMeter, (double)hourpermileQuantity.Value, HoursPerMileTolerance);
            Assert.Equal(InverseSpeedUnit.HourPerMile, hourpermileQuantity.Unit);

            var inverseknotQuantity = secondpermeter.ToUnit(InverseSpeedUnit.InverseKnot);
            AssertEx.EqualTolerance(InverseKnotsInOneSecondPerMeter, (double)inverseknotQuantity.Value, InverseKnotsTolerance);
            Assert.Equal(InverseSpeedUnit.InverseKnot, inverseknotQuantity.Unit);

            var minuteperfootQuantity = secondpermeter.ToUnit(InverseSpeedUnit.MinutePerFoot);
            AssertEx.EqualTolerance(MinutesPerFootInOneSecondPerMeter, (double)minuteperfootQuantity.Value, MinutesPerFootTolerance);
            Assert.Equal(InverseSpeedUnit.MinutePerFoot, minuteperfootQuantity.Unit);

            var minuteperinchQuantity = secondpermeter.ToUnit(InverseSpeedUnit.MinutePerInch);
            AssertEx.EqualTolerance(MinutesPerInchInOneSecondPerMeter, (double)minuteperinchQuantity.Value, MinutesPerInchTolerance);
            Assert.Equal(InverseSpeedUnit.MinutePerInch, minuteperinchQuantity.Unit);

            var minutepermeterQuantity = secondpermeter.ToUnit(InverseSpeedUnit.MinutePerMeter);
            AssertEx.EqualTolerance(MinutesPerMeterInOneSecondPerMeter, (double)minutepermeterQuantity.Value, MinutesPerMeterTolerance);
            Assert.Equal(InverseSpeedUnit.MinutePerMeter, minutepermeterQuantity.Unit);

            var secondperfootQuantity = secondpermeter.ToUnit(InverseSpeedUnit.SecondPerFoot);
            AssertEx.EqualTolerance(SecondsPerFootInOneSecondPerMeter, (double)secondperfootQuantity.Value, SecondsPerFootTolerance);
            Assert.Equal(InverseSpeedUnit.SecondPerFoot, secondperfootQuantity.Unit);

            var secondperinchQuantity = secondpermeter.ToUnit(InverseSpeedUnit.SecondPerInch);
            AssertEx.EqualTolerance(SecondsPerInchInOneSecondPerMeter, (double)secondperinchQuantity.Value, SecondsPerInchTolerance);
            Assert.Equal(InverseSpeedUnit.SecondPerInch, secondperinchQuantity.Unit);

            var secondpermeterQuantity = secondpermeter.ToUnit(InverseSpeedUnit.SecondPerMeter);
            AssertEx.EqualTolerance(SecondsPerMetersInOneSecondPerMeter, (double)secondpermeterQuantity.Value, SecondsPerMetersTolerance);
            Assert.Equal(InverseSpeedUnit.SecondPerMeter, secondpermeterQuantity.Unit);
        }

        [Fact]
        public void ToBaseUnit_ReturnsQuantityWithBaseUnit()
        {
            var quantityInBaseUnit = InverseSpeed.FromSecondsPerMeters(1).ToBaseUnit();
            Assert.Equal(InverseSpeed.BaseUnit, quantityInBaseUnit.Unit);
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            InverseSpeed secondpermeter = InverseSpeed.FromSecondsPerMeters(1);
            AssertEx.EqualTolerance(1, InverseSpeed.FromHoursPerFoot(secondpermeter.HoursPerFoot).SecondsPerMeters, HoursPerFootTolerance);
            AssertEx.EqualTolerance(1, InverseSpeed.FromHoursPerInch(secondpermeter.HoursPerInch).SecondsPerMeters, HoursPerInchTolerance);
            AssertEx.EqualTolerance(1, InverseSpeed.FromHoursPerMeter(secondpermeter.HoursPerMeter).SecondsPerMeters, HoursPerMeterTolerance);
            AssertEx.EqualTolerance(1, InverseSpeed.FromHoursPerMile(secondpermeter.HoursPerMile).SecondsPerMeters, HoursPerMileTolerance);
            AssertEx.EqualTolerance(1, InverseSpeed.FromInverseKnots(secondpermeter.InverseKnots).SecondsPerMeters, InverseKnotsTolerance);
            AssertEx.EqualTolerance(1, InverseSpeed.FromMinutesPerFoot(secondpermeter.MinutesPerFoot).SecondsPerMeters, MinutesPerFootTolerance);
            AssertEx.EqualTolerance(1, InverseSpeed.FromMinutesPerInch(secondpermeter.MinutesPerInch).SecondsPerMeters, MinutesPerInchTolerance);
            AssertEx.EqualTolerance(1, InverseSpeed.FromMinutesPerMeter(secondpermeter.MinutesPerMeter).SecondsPerMeters, MinutesPerMeterTolerance);
            AssertEx.EqualTolerance(1, InverseSpeed.FromSecondsPerFoot(secondpermeter.SecondsPerFoot).SecondsPerMeters, SecondsPerFootTolerance);
            AssertEx.EqualTolerance(1, InverseSpeed.FromSecondsPerInch(secondpermeter.SecondsPerInch).SecondsPerMeters, SecondsPerInchTolerance);
            AssertEx.EqualTolerance(1, InverseSpeed.FromSecondsPerMeters(secondpermeter.SecondsPerMeters).SecondsPerMeters, SecondsPerMetersTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            InverseSpeed v = InverseSpeed.FromSecondsPerMeters(1);
            AssertEx.EqualTolerance(-1, -v.SecondsPerMeters, SecondsPerMetersTolerance);
            AssertEx.EqualTolerance(2, (InverseSpeed.FromSecondsPerMeters(3)-v).SecondsPerMeters, SecondsPerMetersTolerance);
            AssertEx.EqualTolerance(2, (v + v).SecondsPerMeters, SecondsPerMetersTolerance);
            AssertEx.EqualTolerance(10, (v*10).SecondsPerMeters, SecondsPerMetersTolerance);
            AssertEx.EqualTolerance(10, (10*v).SecondsPerMeters, SecondsPerMetersTolerance);
            AssertEx.EqualTolerance(2, (InverseSpeed.FromSecondsPerMeters(10)/5).SecondsPerMeters, SecondsPerMetersTolerance);
            AssertEx.EqualTolerance(2, InverseSpeed.FromSecondsPerMeters(10)/InverseSpeed.FromSecondsPerMeters(5), SecondsPerMetersTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            InverseSpeed oneSecondPerMeter = InverseSpeed.FromSecondsPerMeters(1);
            InverseSpeed twoSecondsPerMeters = InverseSpeed.FromSecondsPerMeters(2);

            Assert.True(oneSecondPerMeter < twoSecondsPerMeters);
            Assert.True(oneSecondPerMeter <= twoSecondsPerMeters);
            Assert.True(twoSecondsPerMeters > oneSecondPerMeter);
            Assert.True(twoSecondsPerMeters >= oneSecondPerMeter);

            Assert.False(oneSecondPerMeter > twoSecondsPerMeters);
            Assert.False(oneSecondPerMeter >= twoSecondsPerMeters);
            Assert.False(twoSecondsPerMeters < oneSecondPerMeter);
            Assert.False(twoSecondsPerMeters <= oneSecondPerMeter);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            InverseSpeed secondpermeter = InverseSpeed.FromSecondsPerMeters(1);
            Assert.Equal(0, secondpermeter.CompareTo(secondpermeter));
            Assert.True(secondpermeter.CompareTo(InverseSpeed.Zero) > 0);
            Assert.True(InverseSpeed.Zero.CompareTo(secondpermeter) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            InverseSpeed secondpermeter = InverseSpeed.FromSecondsPerMeters(1);
            Assert.Throws<ArgumentException>(() => secondpermeter.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            InverseSpeed secondpermeter = InverseSpeed.FromSecondsPerMeters(1);
            Assert.Throws<ArgumentNullException>(() => secondpermeter.CompareTo(null));
        }

        [Fact]
        public void EqualityOperators()
        {
            var a = InverseSpeed.FromSecondsPerMeters(1);
            var b = InverseSpeed.FromSecondsPerMeters(2);

#pragma warning disable CS8073
// ReSharper disable EqualExpressionComparison

            Assert.True(a == a);
            Assert.False(a != a);

            Assert.True(a != b);
            Assert.False(a == b);

            Assert.False(a == null);
            Assert.False(null == a);

// ReSharper restore EqualExpressionComparison
#pragma warning restore CS8073
        }

        [Fact]
        public void Equals_SameType_IsImplemented()
        {
            var a = InverseSpeed.FromSecondsPerMeters(1);
            var b = InverseSpeed.FromSecondsPerMeters(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
        }

        [Fact]
        public void Equals_QuantityAsObject_IsImplemented()
        {
            object a = InverseSpeed.FromSecondsPerMeters(1);
            object b = InverseSpeed.FromSecondsPerMeters(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
            Assert.False(a.Equals((object)null));
        }

        [Fact]
        public void Equals_RelativeTolerance_IsImplemented()
        {
            var v = InverseSpeed.FromSecondsPerMeters(1);
            Assert.True(v.Equals(InverseSpeed.FromSecondsPerMeters(1), SecondsPerMetersTolerance, ComparisonType.Relative));
            Assert.False(v.Equals(InverseSpeed.Zero, SecondsPerMetersTolerance, ComparisonType.Relative));
        }

        [Fact]
        public void Equals_NegativeRelativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var v = InverseSpeed.FromSecondsPerMeters(1);
            Assert.Throws<ArgumentOutOfRangeException>(() => v.Equals(InverseSpeed.FromSecondsPerMeters(1), -1, ComparisonType.Relative));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            InverseSpeed secondpermeter = InverseSpeed.FromSecondsPerMeters(1);
            Assert.False(secondpermeter.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            InverseSpeed secondpermeter = InverseSpeed.FromSecondsPerMeters(1);
            Assert.False(secondpermeter.Equals(null));
        }

        [Fact]
        public void UnitsDoesNotContainUndefined()
        {
            Assert.DoesNotContain(InverseSpeedUnit.Undefined, InverseSpeed.Units);
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues(typeof(InverseSpeedUnit)).Cast<InverseSpeedUnit>();
            foreach(var unit in units)
            {
                if(unit == InverseSpeedUnit.Undefined)
                    continue;

                var defaultAbbreviation = UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(InverseSpeed.BaseDimensions is null);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            var prevCulture = Thread.CurrentThread.CurrentUICulture;
            Thread.CurrentThread.CurrentUICulture = CultureInfo.GetCultureInfo("en-US");
            try {
                Assert.Equal("1 h/ft", new InverseSpeed(1, InverseSpeedUnit.HourPerFoot).ToString());
                Assert.Equal("1 h/in", new InverseSpeed(1, InverseSpeedUnit.HourPerInch).ToString());
                Assert.Equal("1 h/m", new InverseSpeed(1, InverseSpeedUnit.HourPerMeter).ToString());
                Assert.Equal("1 h/mi", new InverseSpeed(1, InverseSpeedUnit.HourPerMile).ToString());
                Assert.Equal("1 1/knot", new InverseSpeed(1, InverseSpeedUnit.InverseKnot).ToString());
                Assert.Equal("1 min/ft", new InverseSpeed(1, InverseSpeedUnit.MinutePerFoot).ToString());
                Assert.Equal("1 min/in", new InverseSpeed(1, InverseSpeedUnit.MinutePerInch).ToString());
                Assert.Equal("1 min/m", new InverseSpeed(1, InverseSpeedUnit.MinutePerMeter).ToString());
                Assert.Equal("1 s/ft", new InverseSpeed(1, InverseSpeedUnit.SecondPerFoot).ToString());
                Assert.Equal("1 s/in", new InverseSpeed(1, InverseSpeedUnit.SecondPerInch).ToString());
                Assert.Equal("1 s/m", new InverseSpeed(1, InverseSpeedUnit.SecondPerMeter).ToString());
            }
            finally
            {
                Thread.CurrentThread.CurrentUICulture = prevCulture;
            }
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 h/ft", new InverseSpeed(1, InverseSpeedUnit.HourPerFoot).ToString(swedishCulture));
            Assert.Equal("1 h/in", new InverseSpeed(1, InverseSpeedUnit.HourPerInch).ToString(swedishCulture));
            Assert.Equal("1 h/m", new InverseSpeed(1, InverseSpeedUnit.HourPerMeter).ToString(swedishCulture));
            Assert.Equal("1 h/mi", new InverseSpeed(1, InverseSpeedUnit.HourPerMile).ToString(swedishCulture));
            Assert.Equal("1 1/knot", new InverseSpeed(1, InverseSpeedUnit.InverseKnot).ToString(swedishCulture));
            Assert.Equal("1 min/ft", new InverseSpeed(1, InverseSpeedUnit.MinutePerFoot).ToString(swedishCulture));
            Assert.Equal("1 min/in", new InverseSpeed(1, InverseSpeedUnit.MinutePerInch).ToString(swedishCulture));
            Assert.Equal("1 min/m", new InverseSpeed(1, InverseSpeedUnit.MinutePerMeter).ToString(swedishCulture));
            Assert.Equal("1 s/ft", new InverseSpeed(1, InverseSpeedUnit.SecondPerFoot).ToString(swedishCulture));
            Assert.Equal("1 s/in", new InverseSpeed(1, InverseSpeedUnit.SecondPerInch).ToString(swedishCulture));
            Assert.Equal("1 s/m", new InverseSpeed(1, InverseSpeedUnit.SecondPerMeter).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var oldCulture = CultureInfo.CurrentUICulture;
            try
            {
                CultureInfo.CurrentUICulture = CultureInfo.InvariantCulture;
                Assert.Equal("0.1 s/m", new InverseSpeed(0.123456, InverseSpeedUnit.SecondPerMeter).ToString("s1"));
                Assert.Equal("0.12 s/m", new InverseSpeed(0.123456, InverseSpeedUnit.SecondPerMeter).ToString("s2"));
                Assert.Equal("0.123 s/m", new InverseSpeed(0.123456, InverseSpeedUnit.SecondPerMeter).ToString("s3"));
                Assert.Equal("0.1235 s/m", new InverseSpeed(0.123456, InverseSpeedUnit.SecondPerMeter).ToString("s4"));
            }
            finally
            {
                CultureInfo.CurrentUICulture = oldCulture;
            }
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 s/m", new InverseSpeed(0.123456, InverseSpeedUnit.SecondPerMeter).ToString("s1", culture));
            Assert.Equal("0.12 s/m", new InverseSpeed(0.123456, InverseSpeedUnit.SecondPerMeter).ToString("s2", culture));
            Assert.Equal("0.123 s/m", new InverseSpeed(0.123456, InverseSpeedUnit.SecondPerMeter).ToString("s3", culture));
            Assert.Equal("0.1235 s/m", new InverseSpeed(0.123456, InverseSpeedUnit.SecondPerMeter).ToString("s4", culture));
        }


        [Fact]
        public void ToString_NullFormat_ThrowsArgumentNullException()
        {
            var quantity = InverseSpeed.FromSecondsPerMeters(1.0);
            Assert.Throws<ArgumentNullException>(() => quantity.ToString(null, null, null));
        }

        [Fact]
        public void ToString_NullArgs_ThrowsArgumentNullException()
        {
            var quantity = InverseSpeed.FromSecondsPerMeters(1.0);
            Assert.Throws<ArgumentNullException>(() => quantity.ToString(null, "g", null));
        }

        [Fact]
        public void ToString_NullProvider_EqualsCurrentUICulture()
        {
            var quantity = InverseSpeed.FromSecondsPerMeters(1.0);
            Assert.Equal(quantity.ToString(CultureInfo.CurrentUICulture, "g"), quantity.ToString(null, "g"));
        }


        [Fact]
        public void Convert_ToBool_ThrowsInvalidCastException()
        {
            var quantity = InverseSpeed.FromSecondsPerMeters(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToBoolean(quantity));
        }

        [Fact]
        public void Convert_ToByte_EqualsValueAsSameType()
        {
            var quantity = InverseSpeed.FromSecondsPerMeters(1.0);
           Assert.Equal((byte)quantity.Value, Convert.ToByte(quantity));
        }

        [Fact]
        public void Convert_ToChar_ThrowsInvalidCastException()
        {
            var quantity = InverseSpeed.FromSecondsPerMeters(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToChar(quantity));
        }

        [Fact]
        public void Convert_ToDateTime_ThrowsInvalidCastException()
        {
            var quantity = InverseSpeed.FromSecondsPerMeters(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToDateTime(quantity));
        }

        [Fact]
        public void Convert_ToDecimal_EqualsValueAsSameType()
        {
            var quantity = InverseSpeed.FromSecondsPerMeters(1.0);
            Assert.Equal((decimal)quantity.Value, Convert.ToDecimal(quantity));
        }

        [Fact]
        public void Convert_ToDouble_EqualsValueAsSameType()
        {
            var quantity = InverseSpeed.FromSecondsPerMeters(1.0);
            Assert.Equal((double)quantity.Value, Convert.ToDouble(quantity));
        }

        [Fact]
        public void Convert_ToInt16_EqualsValueAsSameType()
        {
            var quantity = InverseSpeed.FromSecondsPerMeters(1.0);
            Assert.Equal((short)quantity.Value, Convert.ToInt16(quantity));
        }

        [Fact]
        public void Convert_ToInt32_EqualsValueAsSameType()
        {
            var quantity = InverseSpeed.FromSecondsPerMeters(1.0);
            Assert.Equal((int)quantity.Value, Convert.ToInt32(quantity));
        }

        [Fact]
        public void Convert_ToInt64_EqualsValueAsSameType()
        {
            var quantity = InverseSpeed.FromSecondsPerMeters(1.0);
            Assert.Equal((long)quantity.Value, Convert.ToInt64(quantity));
        }

        [Fact]
        public void Convert_ToSByte_EqualsValueAsSameType()
        {
            var quantity = InverseSpeed.FromSecondsPerMeters(1.0);
            Assert.Equal((sbyte)quantity.Value, Convert.ToSByte(quantity));
        }

        [Fact]
        public void Convert_ToSingle_EqualsValueAsSameType()
        {
            var quantity = InverseSpeed.FromSecondsPerMeters(1.0);
            Assert.Equal((float)quantity.Value, Convert.ToSingle(quantity));
        }

        [Fact]
        public void Convert_ToString_EqualsToString()
        {
            var quantity = InverseSpeed.FromSecondsPerMeters(1.0);
            Assert.Equal(quantity.ToString(), Convert.ToString(quantity));
        }

        [Fact]
        public void Convert_ToUInt16_EqualsValueAsSameType()
        {
            var quantity = InverseSpeed.FromSecondsPerMeters(1.0);
            Assert.Equal((ushort)quantity.Value, Convert.ToUInt16(quantity));
        }

        [Fact]
        public void Convert_ToUInt32_EqualsValueAsSameType()
        {
            var quantity = InverseSpeed.FromSecondsPerMeters(1.0);
            Assert.Equal((uint)quantity.Value, Convert.ToUInt32(quantity));
        }

        [Fact]
        public void Convert_ToUInt64_EqualsValueAsSameType()
        {
            var quantity = InverseSpeed.FromSecondsPerMeters(1.0);
            Assert.Equal((ulong)quantity.Value, Convert.ToUInt64(quantity));
        }

        [Fact]
        public void Convert_ChangeType_SelfType_EqualsSelf()
        {
            var quantity = InverseSpeed.FromSecondsPerMeters(1.0);
            Assert.Equal(quantity, Convert.ChangeType(quantity, typeof(InverseSpeed)));
        }

        [Fact]
        public void Convert_ChangeType_UnitType_EqualsUnit()
        {
            var quantity = InverseSpeed.FromSecondsPerMeters(1.0);
            Assert.Equal(quantity.Unit, Convert.ChangeType(quantity, typeof(InverseSpeedUnit)));
        }

        [Fact]
        public void Convert_ChangeType_QuantityType_EqualsQuantityType()
        {
            var quantity = InverseSpeed.FromSecondsPerMeters(1.0);
            Assert.Equal(QuantityType.InverseSpeed, Convert.ChangeType(quantity, typeof(QuantityType)));
        }

        [Fact]
        public void Convert_ChangeType_QuantityInfo_EqualsQuantityInfo()
        {
            var quantity = InverseSpeed.FromSecondsPerMeters(1.0);
            Assert.Equal(InverseSpeed.Info, Convert.ChangeType(quantity, typeof(QuantityInfo)));
        }

        [Fact]
        public void Convert_ChangeType_BaseDimensions_EqualsBaseDimensions()
        {
            var quantity = InverseSpeed.FromSecondsPerMeters(1.0);
            Assert.Equal(InverseSpeed.BaseDimensions, Convert.ChangeType(quantity, typeof(BaseDimensions)));
        }

        [Fact]
        public void Convert_ChangeType_InvalidType_ThrowsInvalidCastException()
        {
            var quantity = InverseSpeed.FromSecondsPerMeters(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ChangeType(quantity, typeof(QuantityFormatter)));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = InverseSpeed.FromSecondsPerMeters(1.0);
            Assert.Equal(new {InverseSpeed.Info.Name, quantity.Value, quantity.Unit}.GetHashCode(), quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = InverseSpeed.FromSecondsPerMeters(value);
            Assert.Equal(InverseSpeed.FromSecondsPerMeters(-value), -quantity);
        }
    }
}
