//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using UnitsNet.NumberExtensions.NumberToSpecificRange;
using Xunit;

namespace UnitsNet.Tests
{
    public class NumberToSpecificRangeExtensionsTests
    {
        [Fact]
        public void NumberToCentimetersPerKilogramForceTest() =>
            Assert.Equal(SpecificRange.FromCentimetersPerKilogramForce(2), 2.CentimetersPerKilogramForce());

        [Fact]
        public void NumberToCentimetersPerNewtonTest() =>
            Assert.Equal(SpecificRange.FromCentimetersPerNewton(2), 2.CentimetersPerNewton());

        [Fact]
        public void NumberToDecametersPerKilogramForceTest() =>
            Assert.Equal(SpecificRange.FromDecametersPerKilogramForce(2), 2.DecametersPerKilogramForce());

        [Fact]
        public void NumberToDecametersPerNewtonTest() =>
            Assert.Equal(SpecificRange.FromDecametersPerNewton(2), 2.DecametersPerNewton());

        [Fact]
        public void NumberToDecimetersPerKilogramForceTest() =>
            Assert.Equal(SpecificRange.FromDecimetersPerKilogramForce(2), 2.DecimetersPerKilogramForce());

        [Fact]
        public void NumberToDecimetersPerNewtonTest() =>
            Assert.Equal(SpecificRange.FromDecimetersPerNewton(2), 2.DecimetersPerNewton());

        [Fact]
        public void NumberToKilometersPerKilogramForceTest() =>
            Assert.Equal(SpecificRange.FromKilometersPerKilogramForce(2), 2.KilometersPerKilogramForce());

        [Fact]
        public void NumberToKilometersPerNewtonTest() =>
            Assert.Equal(SpecificRange.FromKilometersPerNewton(2), 2.KilometersPerNewton());

        [Fact]
        public void NumberToMegametersPerKilogramForceTest() =>
            Assert.Equal(SpecificRange.FromMegametersPerKilogramForce(2), 2.MegametersPerKilogramForce());

        [Fact]
        public void NumberToMegametersPerNewtonTest() =>
            Assert.Equal(SpecificRange.FromMegametersPerNewton(2), 2.MegametersPerNewton());

        [Fact]
        public void NumberToMetersPerKilogramForceTest() =>
            Assert.Equal(SpecificRange.FromMetersPerKilogramForce(2), 2.MetersPerKilogramForce());

        [Fact]
        public void NumberToMetersPerNewtonTest() =>
            Assert.Equal(SpecificRange.FromMetersPerNewton(2), 2.MetersPerNewton());

        [Fact]
        public void NumberToMicrometersPerKilogramForceTest() =>
            Assert.Equal(SpecificRange.FromMicrometersPerKilogramForce(2), 2.MicrometersPerKilogramForce());

        [Fact]
        public void NumberToMicrometersPerNewtonTest() =>
            Assert.Equal(SpecificRange.FromMicrometersPerNewton(2), 2.MicrometersPerNewton());

        [Fact]
        public void NumberToMillimetersPerKilogramForceTest() =>
            Assert.Equal(SpecificRange.FromMillimetersPerKilogramForce(2), 2.MillimetersPerKilogramForce());

        [Fact]
        public void NumberToMillimetersPerNewtonTest() =>
            Assert.Equal(SpecificRange.FromMillimetersPerNewton(2), 2.MillimetersPerNewton());

        [Fact]
        public void NumberToNanometersPerKilogramForceTest() =>
            Assert.Equal(SpecificRange.FromNanometersPerKilogramForce(2), 2.NanometersPerKilogramForce());

        [Fact]
        public void NumberToNanometersPerNewtonTest() =>
            Assert.Equal(SpecificRange.FromNanometersPerNewton(2), 2.NanometersPerNewton());

        [Fact]
        public void NumberToNauticalMilesPerPoundForceTest() =>
            Assert.Equal(SpecificRange.FromNauticalMilesPerPoundForce(2), 2.NauticalMilesPerPoundForce());

    }
}
