//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using UnitsNet.NumberExtensions.NumberToInverseSpeed;
using Xunit;

namespace UnitsNet.Tests
{
    public class NumberToInverseSpeedExtensionsTests
    {
        [Fact]
        public void NumberToHoursPerFootTest() =>
            Assert.Equal(InverseSpeed.FromHoursPerFoot(2), 2.HoursPerFoot());

        [Fact]
        public void NumberToHoursPerInchTest() =>
            Assert.Equal(InverseSpeed.FromHoursPerInch(2), 2.HoursPerInch());

        [Fact]
        public void NumberToHoursPerMeterTest() =>
            Assert.Equal(InverseSpeed.FromHoursPerMeter(2), 2.HoursPerMeter());

        [Fact]
        public void NumberToHoursPerMileTest() =>
            Assert.Equal(InverseSpeed.FromHoursPerMile(2), 2.HoursPerMile());

        [Fact]
        public void NumberToInverseKnotsTest() =>
            Assert.Equal(InverseSpeed.FromInverseKnots(2), 2.InverseKnots());

        [Fact]
        public void NumberToMinutesPerFootTest() =>
            Assert.Equal(InverseSpeed.FromMinutesPerFoot(2), 2.MinutesPerFoot());

        [Fact]
        public void NumberToMinutesPerInchTest() =>
            Assert.Equal(InverseSpeed.FromMinutesPerInch(2), 2.MinutesPerInch());

        [Fact]
        public void NumberToMinutesPerMeterTest() =>
            Assert.Equal(InverseSpeed.FromMinutesPerMeter(2), 2.MinutesPerMeter());

        [Fact]
        public void NumberToSecondsPerFootTest() =>
            Assert.Equal(InverseSpeed.FromSecondsPerFoot(2), 2.SecondsPerFoot());

        [Fact]
        public void NumberToSecondsPerInchTest() =>
            Assert.Equal(InverseSpeed.FromSecondsPerInch(2), 2.SecondsPerInch());

        [Fact]
        public void NumberToSecondsPerMetersTest() =>
            Assert.Equal(InverseSpeed.FromSecondsPerMeters(2), 2.SecondsPerMeters());

    }
}
